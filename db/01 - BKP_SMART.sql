set sqlblanklines on;

--------------------------------------------------------
-- Archivo creado  - lunes-marzo-16-2020   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SMA_ACCOUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_ACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 51936872 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_BANK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_BANK_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 547 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_BUDGETS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_BUDGETS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4536932 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_CATEGORY_CHANGES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_CATEGORY_CHANGES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_CATEGORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 547 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_COMMERCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_COMMERCE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 547 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_EXCHANGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_EXCHANGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21121 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_H_BUDGETS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_H_BUDGETS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4537580 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_OPERATIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_OPERATIONS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 6516623 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence SMA_USER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USR_ADM"."SMA_USER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 20959913 NOCACHE  NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Table SMA_ACCOUNT
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_ACCOUNT" 
   (	"ACCOUNT_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_ACCOUNT_SEQ"."NEXTVAL", 
	"ACCOUNT_ALIAS" VARCHAR2(300 BYTE), 
	"ACCOUNT_RATE_CODE" VARCHAR2(3 BYTE), 
	"USER_ID" NUMBER(10,0), 
	"ACCOUNT_NAME" VARCHAR2(300 BYTE), 
	"ACCOUNT_TYPE" VARCHAR2(10 BYTE), 
	"ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"STATUS" NUMBER(1,0) DEFAULT 1, 
	"ACCOUNT_CURR_CODE" VARCHAR2(3 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6), 
	"ACCOUNT_NUMBER" VARCHAR2(50 BYTE), 
	"CCI" VARCHAR2(50 BYTE), 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"STATUS_INCOME" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_ID" IS 'Identificador de la tabla con secuencia: SMA_ACCOUNT_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_ALIAS" IS 'Alias cuenta';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_RATE_CODE" IS 'Codigo de tarifa de cuenta';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."USER_ID" IS 'Identificador de la tabla user';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_NAME" IS 'Nombre de la cuenta';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_TYPE" IS 'Tipo de cuenta ';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACTIVE" IS 'Borrado lógico de base de datos: 1=ACTIVO,0=BORRAD';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."STATUS" IS 'Estado de operacion computable. 1: Visible, 0: No visible';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_CURR_CODE" IS 'Codigo de moneda de cuenta , PEN(Soles),USD(Dolares)';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."ACCOUNT_NUMBER" IS 'Creditos: Numero de Tarjeta / Ahorros: Numero de cuenta';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."CCI" IS 'Creditos: Numero de Cuenta y CU / Ahorros: Trama de cuenta, tienda, moneda, banco y categoria';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."UNIQUE_CODE" IS 'Codigo Unico de Usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_ACCOUNT"."STATUS_INCOME" IS '0: No computable para ingresos, 1: Computable para ingresos';
--------------------------------------------------------
--  DDL for Table SMA_BANK
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_BANK" 
   (	"BANK_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_BANK_SEQ"."NEXTVAL", 
	"CODE" VARCHAR2(20 BYTE), 
	"SHORT_NAME" VARCHAR2(60 BYTE), 
	"LONG_NAME" VARCHAR2(60 BYTE), 
	"SHORT_DISPLAY" VARCHAR2(60 BYTE), 
	"LONG_DISPLAY" VARCHAR2(60 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."BANK_ID" IS 'Identificador del Banco, con secuencia: SMART_BANK_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."CODE" IS 'Codigo de Banco';
   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."SHORT_NAME" IS 'Nombre Corto del Banco';
   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."LONG_NAME" IS 'Nombre Largo del Banco';
   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."SHORT_DISPLAY" IS 'Display Corto del Banco';
   COMMENT ON COLUMN "USR_ADM"."SMA_BANK"."LONG_DISPLAY" IS 'Display Largo del Banco';
--------------------------------------------------------
--  DDL for Table SMA_BUDGETS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_BUDGETS" 
   (	"BUDGET_ID" NUMBER(10,0) DEFAULT USR_ADM.SMA_BUDGETS_SEQ.NEXTVAL, 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"CAT_PARENTID" NUMBER, 
	"VALUE_SUGGESTED" NUMBER(*,2) DEFAULT 0, 
	"VALUE_MANUAL" NUMBER DEFAULT 0, 
	"STATUS" CHAR(1 BYTE) DEFAULT NULL, 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"UPDATE_USER" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."BUDGET_ID" IS 'Identificador de la tabla con secuencia: SMA_BUDGETS_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."UNIQUE_CODE" IS 'Codigo unico del usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."CAT_PARENTID" IS 'Id de la categoria Padre (Nivel 1)';
   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."VALUE_SUGGESTED" IS 'Valor de presupuesto surgerido';
   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."VALUE_MANUAL" IS 'Valor de presupuesto manual';
   COMMENT ON COLUMN "USR_ADM"."SMA_BUDGETS"."STATUS" IS 'Marca de presupuesto: (M) Manual S (Sugerido) ';
--------------------------------------------------------
--  DDL for Table SMA_CATALOG
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_CATALOG" 
   (	"CATALOG_APPLICATION" VARCHAR2(4 BYTE), 
	"CATALOG_ID" VARCHAR2(10 BYTE), 
	"CATALOG_DESCRIPTION" VARCHAR2(50 BYTE), 
	"CATALOG_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_CATEGORY
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_CATEGORY" 
   (	"CATEGORY_ID" NUMBER DEFAULT "USR_ADM"."SMA_CATEGORY_SEQ"."NEXTVAL", 
	"CATEGORY_PARENTID" NUMBER, 
	"CATEGORY_LEVEL" NUMBER, 
	"CATEGORY_NAME" VARCHAR2(512 BYTE), 
	"CATEGORY_DESCRIPTION" VARCHAR2(512 BYTE), 
	"CATEGORY_ORDER" NUMBER, 
	"CATEGORY_COLOR" VARCHAR2(20 BYTE), 
	"CATEGORY_COMP" NUMBER(1,0) DEFAULT 1, 
	"CATEGORY_IN" NUMBER(1,0), 
	"CATEGORY_ICON" VARCHAR2(30 BYTE), 
	"CATEGORY_USER" VARCHAR2(20 BYTE), 
	"CATEGORY_CREATE_DATE" DATE DEFAULT sysdate, 
	"CATEGORY_UPDATE_DATE" DATE DEFAULT sysdate, 
	"CATEGORY_GROUP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY"."CATEGORY_IN" IS 'Estado que indica si la categoria pertenece a 0: Gastos, 1: Ingresos';
--------------------------------------------------------
--  DDL for Table SMA_CATEGORY_CHANGES
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" 
   (	"CATEGORY_CHANGES_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_CATEGORY_CHANGES_SEQ"."NEXTVAL", 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"SOURCE_CATEGORY_ID" NUMBER(10,0), 
	"DEST_CATEGORY_ID" NUMBER(10,0), 
	"ESTABLISHMENT" VARCHAR2(100 BYTE), 
	"CHANGES" NUMBER(4,0) DEFAULT 0, 
	"ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."CATEGORY_CHANGES_ID" IS 'Identificador de la tabla con secuencia: SMA_CATEGORY_CHANGES_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."UNIQUE_CODE" IS 'Codigo Unico de Usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."SOURCE_CATEGORY_ID" IS 'Categoria de origen de la operacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."DEST_CATEGORY_ID" IS 'Categoria de destino de la operacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."ESTABLISHMENT" IS 'Nombre del establecimiento';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."CHANGES" IS 'Numero de cambios que se han hecho a la operacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_CATEGORY_CHANGES"."ACTIVE" IS 'Borrado lógico de base de datos: 1=ACTIVO,0=BORRADO';
--------------------------------------------------------
--  DDL for Table SMA_COMMERCE
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COMMERCE" 
   (	"COMMERCE_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_COMMERCE_SEQ"."NEXTVAL", 
	"COMMERCE_NAME" VARCHAR2(300 BYTE), 
	"COMMERCE_DESCRIPTION" VARCHAR2(1000 BYTE), 
	"ACTIVE" NUMBER(1,0), 
	"STATUS" VARCHAR2(20 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_COMMERCE"."COMMERCE_ID" IS 'Identificador de la tabla con secuencia: SMA_COMMERCE_SEQ
';
   COMMENT ON COLUMN "USR_ADM"."SMA_COMMERCE"."COMMERCE_NAME" IS 'Nombre del commerce
';
   COMMENT ON COLUMN "USR_ADM"."SMA_COMMERCE"."COMMERCE_DESCRIPTION" IS 'Descripcion de la commerce';
   COMMENT ON COLUMN "USR_ADM"."SMA_COMMERCE"."ACTIVE" IS 'Borrado lógico de base de datos: 1=ACTIVO,0=BORRADO
';
--------------------------------------------------------
--  DDL for Table SMA_CONFIG
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_CONFIG" 
   (	"KEY_NAME" VARCHAR2(50 BYTE), 
	"C_VALUE" VARCHAR2(20 BYTE), 
	"ESTADO" CHAR(1 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_COPY_CREDITS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COPY_CREDITS" 
   (	"SMCR_TRANSID" VARCHAR2(64 CHAR), 
	"SMCR_ACCOUNTID" VARCHAR2(64 CHAR), 
	"SMCR_POSTEDDATE" DATE, 
	"SMCR_CREATEDATE" DATE, 
	"SMCR_AMT" NUMBER(31,2), 
	"SMCR_AMTSIGN" VARCHAR2(10 CHAR) DEFAULT '-', 
	"SMCR_CUR" VARCHAR2(10 CHAR), 
	"SMCR_NAME" VARCHAR2(256 CHAR), 
	"SMCR_STATUS" VARCHAR2(64 CHAR), 
	"SMCR_EXCLUDEPATTERN" NUMBER(1,0), 
	"SMCR_CATFIELD01" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD02" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD03" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD04" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD05" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD06" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD07" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD08" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD09" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD10" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD11" VARCHAR2(256 CHAR), 
	"SMCR_CATFIELD12" VARCHAR2(256 CHAR), 
	"SMCR_CATID" NUMBER, 
	"SMCR_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_COPY_EXCHANGES
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COPY_EXCHANGES" 
   (	"SMCE_SOURCECURRENCY" VARCHAR2(3 CHAR), 
	"SMCE_TARGETCURRENCY" VARCHAR2(3 CHAR), 
	"SMCE_EXCHANGE" NUMBER, 
	"SMCE_EXCHANGEDATE" DATE, 
	"SMCE_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_COPY_MAESTRO
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COPY_MAESTRO" 
   (	"SMCM_ACCOUNT_NUMBER" VARCHAR2(25 BYTE), 
	"SMCM_COD_CURRENCY" VARCHAR2(3 BYTE), 
	"SMCM_COD_PRODUCT" VARCHAR2(3 BYTE), 
	"SMCM_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_COPY_MOVCTAS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COPY_MOVCTAS" 
   (	"SMCM_EVENTID" VARCHAR2(40 CHAR), 
	"SMCM_EVENTDESC" VARCHAR2(60 CHAR), 
	"SMCM_STARTDATE" DATE, 
	"SMCM_ENDDATE" DATE, 
	"SMCM_TRANSCODE" VARCHAR2(4 CHAR), 
	"SMCM_REGTYPECODE" VARCHAR2(2 CHAR), 
	"SMCM_REASONCODE" VARCHAR2(2 CHAR), 
	"SMCM_STARTIME" VARCHAR2(6 CHAR), 
	"SMCM_ENDTIME" VARCHAR2(6 CHAR), 
	"SMCM_SUBTYPE_EVENTCODE" VARCHAR2(2 CHAR), 
	"SMCM_SOURCEAPP" VARCHAR2(7 CHAR), 
	"SMCM_DATEINFO" DATE, 
	"SMCM_FINANEVENT_TYPECODE" VARCHAR2(2 CHAR), 
	"SMCM_HALFBUSINESS_CODE" VARCHAR2(2 CHAR), 
	"SMCM_CHECKBILL_NUMBER" VARCHAR2(8 CHAR), 
	"SMCM_AMOUNT_TYPECODE" VARCHAR2(2 CHAR), 
	"SMCM_TRANSAMOUNT" VARCHAR2(17 CHAR), 
	"SMCM_SIGNAMOUNT" VARCHAR2(1 CHAR), 
	"SMCM_CURRENCYCODE_ORIG" VARCHAR2(3 CHAR), 
	"SMCM_CURRENCYCODE_DEST" VARCHAR2(3 CHAR), 
	"SMCM_UNIQUECODECLI" VARCHAR2(10 CHAR), 
	"SMCM_ACCOUNTCODE" VARCHAR2(25 CHAR), 
	"SMCM_CARDNUMBER" VARCHAR2(19 CHAR), 
	"SMCM_CHANGETYPE" VARCHAR2(6 CHAR), 
	"SMCM_TRANSRECUR" VARCHAR2(2 CHAR), 
	"SMCM_ACCOUNTORIGIN" VARCHAR2(25 CHAR), 
	"SMCM_DESTBANK" VARCHAR2(20 CHAR), 
	"SMCM_DEST_ACCOUNTCODE" VARCHAR2(20 CHAR), 
	"SMCM_HOSTTRANS_NUMBER" VARCHAR2(20 CHAR), 
	"SMCM_TRANSEFECT_FECH" DATE, 
	"SMCM_TRANSDOC_NUMBER" VARCHAR2(20 CHAR), 
	"SMCM_TRANSMETHOD_CODE" VARCHAR2(2 CHAR), 
	"SMCM_TRANS_TYPECODECLASIF" VARCHAR2(2 CHAR), 
	"SMCM_TRANS_TYPECODE" VARCHAR2(2 CHAR), 
	"SMCM_TRANS_PROCESSCODE" VARCHAR2(2 CHAR), 
	"SMCM_TRANS_FECHPUBLI" DATE, 
	"SMCM_CURRENCY_AMOUNT" VARCHAR2(17 CHAR), 
	"SMCM_VALUEDATE" DATE, 
	"SMCM_PRODUCT_CODE" VARCHAR2(2 CHAR), 
	"SMCM_EMPLOYEE_CODE" VARCHAR2(2 CHAR), 
	"SMCM_UBITRANS_CODE" VARCHAR2(2 CHAR), 
	"SMCM_CHANNELCODE" VARCHAR2(30 CHAR), 
	"SMCM_ESTABLISHCODE" VARCHAR2(3 CHAR), 
	"SMCM_ESTTRANS_CODE" VARCHAR2(1 CHAR), 
	"SMCM_TRANSDESC" VARCHAR2(80 CHAR), 
	"SMCM_SOURCE_ORIGINCODE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_AMOUNT_CURRELOCAL" VARCHAR2(17 CHAR), 
	"SMCM_ACF_AMOUNT_CURREDOLLAR" VARCHAR2(17 CHAR), 
	"SMCM_AUTHORIZATION" VARCHAR2(1 CHAR), 
	"SMCM_ACF_ESTABLISHNAME" VARCHAR2(80 CHAR), 
	"SMCM_ACF_ESTDEP" VARCHAR2(1 CHAR), 
	"SMCM_ACF_IND_ECOMERCE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_PRODTC_TYPE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_CLIENTID_TYPE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_CLIENTE_LORINT" VARCHAR2(2 CHAR), 
	"SMCM_ACF_REFER2" VARCHAR2(30 CHAR), 
	"SMCM_ACF_ORIGINCODE" VARCHAR2(20 CHAR), 
	"SMCM_ACF_COUNTRYTC_CODE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_COUNTRYEMI_CODE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_CHANNEL" VARCHAR2(30 CHAR), 
	"SMCM_ACF_ORGANIZATIONID" VARCHAR2(20 CHAR), 
	"SMCM_ACF_SERVICECODE" VARCHAR2(2 CHAR), 
	"SMCM_RZCH_TRAN" VARCHAR2(2 CHAR), 
	"SMCM_ACF_BIN1" VARCHAR2(2 CHAR), 
	"SMCM_ACF_CARDNUMBER_ENCR_AES" VARCHAR2(19 CHAR), 
	"SMCM_ACF_REGISTCARD_750" VARCHAR2(19 CHAR), 
	"SMCM_ACF_PROCESSMODE" VARCHAR2(1 CHAR), 
	"SMCM_ACF_ADDRESSTERM_IP" VARCHAR2(15 CHAR), 
	"SMCM_SERVICEPOINT_CODE" VARCHAR2(2 CHAR), 
	"SMCM_FLAG_TRANSAUTO" VARCHAR2(20 CHAR), 
	"SMCM_ACF_OPERATYPE" VARCHAR2(1 CHAR), 
	"SMCM_ACF_TRANSACTOR_CODE" VARCHAR2(2 CHAR), 
	"SMCM_ACF_MCC_1" VARCHAR2(2 CHAR), 
	"SMCM_USERREG" VARCHAR2(60 CHAR), 
	"SMCM_CREATEMODIFREG_DATE" DATE, 
	"SMCM_CREATEMODIFREG_TIME" VARCHAR2(6 CHAR), 
	"SMCM_ACCOUNTINGACC_CODE" VARCHAR2(2 CHAR), 
	"SMCM_TERMINALTYPE" VARCHAR2(2 CHAR), 
	"SMCM_OPERAORIGIN" VARCHAR2(1 CHAR), 
	"SMCM_PERSONTYPE" VARCHAR2(1 CHAR), 
	"SMCM_CUENTA_ORDBENEF" VARCHAR2(25 BYTE), 
	"SMCM_CODUNICO_ORDBENEF" VARCHAR2(10 CHAR), 
	"SMCM_NOMBRE_ORDBENEF" VARCHAR2(40 CHAR), 
	"SMCM_CCI_ORDBENEF" VARCHAR2(30 CHAR), 
	"SMCM_TRANSF_MISMO_OTRO_CLIENTE" VARCHAR2(1 BYTE), 
	"SMCM_NOMBRE_TITULAR_CUENTA" VARCHAR2(40 BYTE), 
	"SMCM_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_COPY_SAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_COPY_SAVINGS" 
   (	"SMCS_TRANSID" VARCHAR2(64 CHAR), 
	"SMCS_ACCOUNTID" VARCHAR2(64 CHAR), 
	"SMCS_POSTEDDATE" DATE, 
	"SMCS_CREATEDATE" DATE, 
	"SMCS_AMT" NUMBER(31,2), 
	"SMCS_AMTSIGN" VARCHAR2(10 CHAR) DEFAULT '-', 
	"SMCS_CUR" VARCHAR2(10 CHAR), 
	"SMCS_NAME" VARCHAR2(256 CHAR), 
	"SMCS_STATUS" VARCHAR2(64 CHAR), 
	"SMCS_EXCLUDEPATTERN" NUMBER(1,0) DEFAULT 0, 
	"SMCS_CATFIELD01" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD02" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD03" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD04" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD05" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD06" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD07" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD08" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD09" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD10" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD11" VARCHAR2(256 CHAR), 
	"SMCS_CATFIELD12" VARCHAR2(256 CHAR), 
	"SMCS_CATID" NUMBER, 
	"SMCS_PROC_DATE" DATE, 
	"SMCS_CUENTA_ORDBENEF" VARCHAR2(25 BYTE), 
	"SMCS_CODUNICO_ORDBENEF" VARCHAR2(10 BYTE), 
	"SMCS_NOMBRE_ORDBENEF" VARCHAR2(40 BYTE), 
	"SMCS_CCI_ORDBENEF" VARCHAR2(30 BYTE), 
	"SMCS_TRANSF_MISMO_OTRO_CLIENTE" VARCHAR2(1 BYTE), 
	"SMCS_NOMBRE_TITULAR_CUENTA" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_EXCHANGES
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_EXCHANGES" 
   (	"ID" NUMBER, 
	"SOURCECURRENCY" VARCHAR2(3 BYTE), 
	"TARGETCURRENCY" VARCHAR2(3 BYTE), 
	"VALOR" NUMBER(32,10), 
	"EXCHANGE_DATE" DATE, 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."ID" IS 'Correlativo secuencial SMA_EXCHANGES_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."SOURCECURRENCY" IS 'Tipo de moneda origen';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."TARGETCURRENCY" IS 'Tipo de moneda destino';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."VALOR" IS 'Valor del cambio de moneda';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."EXCHANGE_DATE" IS 'Fecha de cambio de moneda';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."CREATE_DATE" IS 'Fecha de creacion de registro';
   COMMENT ON COLUMN "USR_ADM"."SMA_EXCHANGES"."UPDATE_DATE" IS 'Fecha de actualizacion de registro';
--------------------------------------------------------
--  DDL for Table SMA_H_BUDGETS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_H_BUDGETS" 
   (	"H_BUDGETS_ID" NUMBER DEFAULT USR_ADM.SMA_H_BUDGETS_SEQ.NEXTVAL, 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"CAT_PARENTID" NUMBER, 
	"MONTH_BG" DATE, 
	"VALUE_SUGGESTED" NUMBER DEFAULT 0, 
	"VALUE_MANUAL" NUMBER DEFAULT 0, 
	"STATUS" CHAR(1 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"UPDATE_USER" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS  LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARTITION BY LIST ("MONTH_BG") 
 (PARTITION "P_201903"  VALUES (TO_DATE(' 2019-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201904"  VALUES (TO_DATE(' 2019-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201905"  VALUES (TO_DATE(' 2019-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201906"  VALUES (TO_DATE(' 2019-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201907"  VALUES (TO_DATE(' 2019-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201908"  VALUES (TO_DATE(' 2019-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201909"  VALUES (TO_DATE(' 2019-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201910"  VALUES (TO_DATE(' 2019-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201911"  VALUES (TO_DATE(' 2019-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201912"  VALUES (TO_DATE(' 2019-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202001"  VALUES (TO_DATE(' 2020-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202002"  VALUES (TO_DATE(' 2020-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202003"  VALUES (TO_DATE(' 2020-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202004"  VALUES (TO_DATE(' 2020-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;
--------------------------------------------------------
--  DDL for Table SMA_H_OPERATIONS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_H_OPERATIONS" 
   (	"OPERATIONS_ID" NUMBER(10,0), 
	"CATEGORY_ID" NUMBER(10,0), 
	"ACCOUNT_ID" NUMBER(10,0), 
	"OPERATIONS_CURR_CODE" VARCHAR2(3 BYTE), 
	"OPERATIONS_COMMENT" VARCHAR2(1000 BYTE), 
	"COMMERCE_ID" NUMBER(10,0), 
	"ORIGINAL_CATEGORY_ID" NUMBER(10,0), 
	"UNIQUE_CODE_PERSONAL" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE_ADDITIONAL" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(10 BYTE), 
	"TRANSFER_TYPE" NUMBER(4,0), 
	"MOVEMENT_TYPE" VARCHAR2(10 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6), 
	"AMOUNT" NUMBER, 
	"OPERATION_DATE" DATE, 
	"TRANS_ID" VARCHAR2(80 BYTE), 
	"STATUS" CHAR(1 BYTE) DEFAULT 1, 
	"APLICATION" VARCHAR2(20 BYTE), 
	"OPERATION_TYPE" CHAR(1 BYTE), 
	"ESTABLISHMENT" VARCHAR2(100 BYTE), 
	"ID_MCC" VARCHAR2(10 BYTE), 
	"OPERATION_MCC" VARCHAR2(20 BYTE), 
	"NUM_OPER" VARCHAR2(20 BYTE), 
	"STATUS_PREMIA" CHAR(1 BYTE) DEFAULT 'C', 
	"AMOUNT_EXCHANGED" NUMBER
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARTITION BY RANGE ("OPERATION_DATE") 
 (PARTITION "P_20150931"  VALUES LESS THAN (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151031"  VALUES LESS THAN (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151131"  VALUES LESS THAN (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151231"  VALUES LESS THAN (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160131"  VALUES LESS THAN (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160231"  VALUES LESS THAN (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160331"  VALUES LESS THAN (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160431"  VALUES LESS THAN (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160531"  VALUES LESS THAN (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160631"  VALUES LESS THAN (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160731"  VALUES LESS THAN (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160831"  VALUES LESS THAN (TO_DATE(' 2016-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160931"  VALUES LESS THAN (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161031"  VALUES LESS THAN (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161131"  VALUES LESS THAN (TO_DATE(' 2016-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161231"  VALUES LESS THAN (TO_DATE(' 2017-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170131"  VALUES LESS THAN (TO_DATE(' 2017-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170231"  VALUES LESS THAN (TO_DATE(' 2017-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170331"  VALUES LESS THAN (TO_DATE(' 2017-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170431"  VALUES LESS THAN (TO_DATE(' 2017-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170531"  VALUES LESS THAN (TO_DATE(' 2017-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170631"  VALUES LESS THAN (TO_DATE(' 2017-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170731"  VALUES LESS THAN (TO_DATE(' 2017-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170831"  VALUES LESS THAN (TO_DATE(' 2017-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170931"  VALUES LESS THAN (TO_DATE(' 2017-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171031"  VALUES LESS THAN (TO_DATE(' 2017-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171131"  VALUES LESS THAN (TO_DATE(' 2017-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171231"  VALUES LESS THAN (TO_DATE(' 2018-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180131"  VALUES LESS THAN (TO_DATE(' 2018-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180231"  VALUES LESS THAN (TO_DATE(' 2018-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180331"  VALUES LESS THAN (TO_DATE(' 2018-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180431"  VALUES LESS THAN (TO_DATE(' 2018-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180531"  VALUES LESS THAN (TO_DATE(' 2018-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180631"  VALUES LESS THAN (TO_DATE(' 2018-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180731"  VALUES LESS THAN (TO_DATE(' 2018-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180831"  VALUES LESS THAN (TO_DATE(' 2018-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180931"  VALUES LESS THAN (TO_DATE(' 2018-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181031"  VALUES LESS THAN (TO_DATE(' 2018-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181131"  VALUES LESS THAN (TO_DATE(' 2018-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181231"  VALUES LESS THAN (TO_DATE(' 2019-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190131"  VALUES LESS THAN (TO_DATE(' 2019-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190231"  VALUES LESS THAN (TO_DATE(' 2019-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190331"  VALUES LESS THAN (TO_DATE(' 2019-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190431"  VALUES LESS THAN (TO_DATE(' 2019-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190531"  VALUES LESS THAN (TO_DATE(' 2019-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190631"  VALUES LESS THAN (TO_DATE(' 2019-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190731"  VALUES LESS THAN (TO_DATE(' 2019-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190831"  VALUES LESS THAN (TO_DATE(' 2019-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190931"  VALUES LESS THAN (TO_DATE(' 2019-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191031"  VALUES LESS THAN (TO_DATE(' 2019-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;

   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."OPERATIONS_ID" IS 'Identificador de la tabla con secuencia: SMA_H_OPERATIONS_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."CATEGORY_ID" IS 'Identificador de la tabla category';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."ACCOUNT_ID" IS 'Identificador de la tabla account';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."OPERATIONS_CURR_CODE" IS 'Código de moneda de cuenta a cargo, PEN(Soles),USD(Dolares)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."ORIGINAL_CATEGORY_ID" IS 'Identificador original de la tabla categoria';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."UNIQUE_CODE_PERSONAL" IS 'Código único titular';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."UNIQUE_CODE_ADDITIONAL" IS 'Código único adicional';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."PRODUCT_CODE" IS 'Código producto (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."TRANSFER_TYPE" IS 'Tipo transferencia';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."MOVEMENT_TYPE" IS 'Tipo de movimiento (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."AMOUNT" IS 'Monto de la operación';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."OPERATION_DATE" IS 'Fecha de operación';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."TRANS_ID" IS 'Trama de datos de oficina y cuenta (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."STATUS" IS 'Estado de operacion computable. 1: Visible, 0: No visible';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."APLICATION" IS 'Aplicacion: SAT,NSAT,SAV';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."OPERATION_TYPE" IS 'Ingreso (1) o Gasto (0)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."ESTABLISHMENT" IS 'Nombre del establecimiento';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."ID_MCC" IS 'Codigo de Tienda (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."OPERATION_MCC" IS 'Tipo de Operacion Tienda (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."NUM_OPER" IS 'Numero de Operacion (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."STATUS_PREMIA" IS 'Estado de la transaccion para premia. C:Conciliado';
   COMMENT ON COLUMN "USR_ADM"."SMA_H_OPERATIONS"."AMOUNT_EXCHANGED" IS 'Monto de la operacion intercambiado a soles';
--------------------------------------------------------
--  DDL for Table SMA_ONBOARD_PP
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_ONBOARD_PP" 
   (	"ONBOARD_NAME" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"ONBOARD_STATUS" CHAR(1 BYTE) DEFAULT '0', 
	"CREATE_USER" VARCHAR2(20 BYTE), 
	"UPDATE_USER" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_ONBOARD_SMART
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_ONBOARD_SMART" 
   (	"ONBOARD_NAME" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"ONBOARD_STATUS" CHAR(1 BYTE) DEFAULT '0', 
	"CREATE_USER" VARCHAR2(20 BYTE), 
	"UPDATE_USER" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_OPERATIONS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_OPERATIONS" 
   (	"OPERATIONS_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_OPERATIONS_SEQ"."NEXTVAL", 
	"CATEGORY_ID" NUMBER(10,0), 
	"ACCOUNT_ID" NUMBER(10,0), 
	"OPERATIONS_CURR_CODE" VARCHAR2(3 BYTE), 
	"OPERATIONS_COMMENT" VARCHAR2(1000 BYTE), 
	"COMMERCE_ID" NUMBER(10,0), 
	"ORIGINAL_CATEGORY_ID" NUMBER(10,0), 
	"UNIQUE_CODE_PERSONAL" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE_ADDITIONAL" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(10 BYTE), 
	"TRANSFER_TYPE" NUMBER(4,0), 
	"MOVEMENT_TYPE" VARCHAR2(10 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6), 
	"AMOUNT" NUMBER, 
	"OPERATION_DATE" DATE, 
	"TRANS_ID" VARCHAR2(80 BYTE), 
	"STATUS" CHAR(1 BYTE) DEFAULT 1, 
	"APLICATION" VARCHAR2(20 BYTE), 
	"OPERATION_TYPE" CHAR(1 BYTE), 
	"ESTABLISHMENT" VARCHAR2(100 BYTE), 
	"ID_MCC" VARCHAR2(10 BYTE), 
	"OPERATION_MCC" VARCHAR2(20 BYTE), 
	"NUM_OPER" VARCHAR2(20 BYTE), 
	"STATUS_PREMIA" CHAR(1 BYTE) DEFAULT 'C', 
	"AMOUNT_EXCHANGED" NUMBER, 
	"CUENTA_ORDBENEF" VARCHAR2(25 BYTE), 
	"CODUNICO_ORDBENEF" VARCHAR2(10 BYTE), 
	"NOMBRE_ORDBENEF" VARCHAR2(40 BYTE), 
	"CCI_ORDBENEF" VARCHAR2(30 BYTE), 
	"TRANSF_MISMO_OTRO_CLIENTE" VARCHAR2(1 BYTE), 
	"NOMBRE_TITULAR_CUENTA" VARCHAR2(40 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS  LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
     NO INMEMORY 
  PARTITION BY RANGE ("OPERATION_DATE") 
 (PARTITION "P_20150931"  VALUES LESS THAN (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151031"  VALUES LESS THAN (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151131"  VALUES LESS THAN (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151231"  VALUES LESS THAN (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160131"  VALUES LESS THAN (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160231"  VALUES LESS THAN (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160331"  VALUES LESS THAN (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160431"  VALUES LESS THAN (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160531"  VALUES LESS THAN (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160631"  VALUES LESS THAN (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160731"  VALUES LESS THAN (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160831"  VALUES LESS THAN (TO_DATE(' 2016-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160931"  VALUES LESS THAN (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161031"  VALUES LESS THAN (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161131"  VALUES LESS THAN (TO_DATE(' 2016-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161231"  VALUES LESS THAN (TO_DATE(' 2017-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170131"  VALUES LESS THAN (TO_DATE(' 2017-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170231"  VALUES LESS THAN (TO_DATE(' 2017-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170331"  VALUES LESS THAN (TO_DATE(' 2017-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170431"  VALUES LESS THAN (TO_DATE(' 2017-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170531"  VALUES LESS THAN (TO_DATE(' 2017-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170631"  VALUES LESS THAN (TO_DATE(' 2017-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170731"  VALUES LESS THAN (TO_DATE(' 2017-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170831"  VALUES LESS THAN (TO_DATE(' 2017-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170931"  VALUES LESS THAN (TO_DATE(' 2017-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171031"  VALUES LESS THAN (TO_DATE(' 2017-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171131"  VALUES LESS THAN (TO_DATE(' 2017-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171231"  VALUES LESS THAN (TO_DATE(' 2018-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180131"  VALUES LESS THAN (TO_DATE(' 2018-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180231"  VALUES LESS THAN (TO_DATE(' 2018-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180331"  VALUES LESS THAN (TO_DATE(' 2018-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180431"  VALUES LESS THAN (TO_DATE(' 2018-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180531"  VALUES LESS THAN (TO_DATE(' 2018-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180631"  VALUES LESS THAN (TO_DATE(' 2018-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180731"  VALUES LESS THAN (TO_DATE(' 2018-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180831"  VALUES LESS THAN (TO_DATE(' 2018-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180931"  VALUES LESS THAN (TO_DATE(' 2018-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181031"  VALUES LESS THAN (TO_DATE(' 2018-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181131"  VALUES LESS THAN (TO_DATE(' 2018-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181231"  VALUES LESS THAN (TO_DATE(' 2019-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190131"  VALUES LESS THAN (TO_DATE(' 2019-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190231"  VALUES LESS THAN (TO_DATE(' 2019-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190331"  VALUES LESS THAN (TO_DATE(' 2019-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190431"  VALUES LESS THAN (TO_DATE(' 2019-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190531"  VALUES LESS THAN (TO_DATE(' 2019-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190631"  VALUES LESS THAN (TO_DATE(' 2019-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190731"  VALUES LESS THAN (TO_DATE(' 2019-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190831"  VALUES LESS THAN (TO_DATE(' 2019-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190931"  VALUES LESS THAN (TO_DATE(' 2019-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191031"  VALUES LESS THAN (TO_DATE(' 2019-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191131"  VALUES LESS THAN (TO_DATE(' 2019-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191231"  VALUES LESS THAN (TO_DATE(' 2020-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200131"  VALUES LESS THAN (TO_DATE(' 2020-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200231"  VALUES LESS THAN (TO_DATE(' 2020-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200331"  VALUES LESS THAN (TO_DATE(' 2020-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))   NO INMEMORY SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;

   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."OPERATIONS_ID" IS 'Identificador de la tabla con secuencia: SMA_OPERATIONS_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."CATEGORY_ID" IS 'Identificador de la tabla category';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."ACCOUNT_ID" IS 'Identificador de la tabla account';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."OPERATIONS_CURR_CODE" IS 'Código de moneda de cuenta a cargo, PEN(Soles),USD(Dolares)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."ORIGINAL_CATEGORY_ID" IS 'Identificador original de la tabla categoria';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."UNIQUE_CODE_PERSONAL" IS 'Código único titular';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."UNIQUE_CODE_ADDITIONAL" IS 'Código único adicional';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."PRODUCT_CODE" IS 'Código producto (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."TRANSFER_TYPE" IS 'Tipo transferencia';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."MOVEMENT_TYPE" IS 'Tipo de movimiento (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."AMOUNT" IS 'Monto de la operación';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."OPERATION_DATE" IS 'Fecha de operación';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."TRANS_ID" IS 'Trama de datos de oficina y cuenta (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."STATUS" IS 'Estado de operacion computable. 1: Visible, 0: No visible';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."APLICATION" IS 'Aplicacion: SAT,NSAT,SAV';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."OPERATION_TYPE" IS 'Ingreso (1) o Gasto (0)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."ESTABLISHMENT" IS 'Nombre del establecimiento';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."ID_MCC" IS 'Codigo de Tienda (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."OPERATION_MCC" IS 'Tipo de Operacion Tienda (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."NUM_OPER" IS 'Numero de Operacion (Legacy)';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."STATUS_PREMIA" IS 'Estado de la transaccion para premia. C:Conciliado';
   COMMENT ON COLUMN "USR_ADM"."SMA_OPERATIONS"."AMOUNT_EXCHANGED" IS 'Monto de la operacion intercambiado a soles';
--------------------------------------------------------
--  DDL for Table SMA_OPERATIONS_R
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_OPERATIONS_R" 
   (	"OPERATIONS_ID" NUMBER(10,0), 
	"CATEGORY_ID" NUMBER(10,0), 
	"ACCOUNT_ID" NUMBER(10,0), 
	"OPERATIONS_CURR_CODE" VARCHAR2(3 BYTE), 
	"OPERATIONS_COMMENT" VARCHAR2(1000 BYTE), 
	"COMMERCE_ID" NUMBER(10,0), 
	"ORIGINAL_CATEGORY_ID" NUMBER(10,0), 
	"UNIQUE_CODE_PERSONAL" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE_ADDITIONAL" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(10 BYTE), 
	"TRANSFER_TYPE" NUMBER(4,0), 
	"MOVEMENT_TYPE" VARCHAR2(10 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"AMOUNT" NUMBER, 
	"OPERATION_DATE" DATE, 
	"TRANS_ID" VARCHAR2(80 BYTE), 
	"STATUS" CHAR(1 BYTE), 
	"APLICATION" VARCHAR2(20 BYTE), 
	"OPERATION_TYPE" CHAR(1 BYTE), 
	"ESTABLISHMENT" VARCHAR2(100 BYTE), 
	"ID_MCC" VARCHAR2(10 BYTE), 
	"OPERATION_MCC" VARCHAR2(20 BYTE), 
	"NUM_OPER" VARCHAR2(20 BYTE), 
	"STATUS_PREMIA" CHAR(1 BYTE), 
	"AMOUNT_EXCHANGED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_RULES_CREDITS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_RULES_CREDITS" 
   (	"ID" NUMBER, 
	"AUTO_ID" NUMBER, 
	"C_ORDER" NUMBER, 
	"CAT_ID" NUMBER, 
	"NAME" VARCHAR2(256 BYTE), 
	"OPERATION_TYPE" NUMBER(1,0), 
	"APPLICATION" VARCHAR2(256 BYTE), 
	"MOVEMENT_TYPE" VARCHAR2(256 BYTE), 
	"COD_MCC" VARCHAR2(256 BYTE), 
	"ESTABLISHMENT" VARCHAR2(256 BYTE), 
	"CURR_2" VARCHAR2(256 BYTE), 
	"CREDIT_CARD" VARCHAR2(256 BYTE), 
	"NUM_OPER" VARCHAR2(256 BYTE), 
	"COD_PRODUCT" VARCHAR2(256 BYTE), 
	"UNIQUE_CODE_PERS" VARCHAR2(256 BYTE), 
	"UNIQUE_CODE_ADIT" VARCHAR2(256 BYTE), 
	"ACTIVE" NUMBER(1,0), 
	"CREATE_USER" VARCHAR2(60 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_RULES_SAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_RULES_SAVINGS" 
   (	"ID" NUMBER, 
	"AUTO_ID" NUMBER, 
	"S_ORDER" NUMBER, 
	"CAT_ID" NUMBER, 
	"NAME" VARCHAR2(256 BYTE), 
	"OPERATION_TYPE" NUMBER(1,0), 
	"APPLICATION" VARCHAR2(256 BYTE), 
	"MOVEMENT_TYPE" VARCHAR2(256 BYTE), 
	"COD_MCC" VARCHAR2(256 BYTE), 
	"ESTABLISHMENT" VARCHAR2(256 BYTE), 
	"CURR_2" VARCHAR2(256 BYTE), 
	"ACCOUNT_NUMBER" VARCHAR2(256 BYTE), 
	"NUM_OPER" VARCHAR2(256 BYTE), 
	"COD_PRODUCT" VARCHAR2(256 BYTE), 
	"UNIQUE_CODE" VARCHAR2(256 BYTE), 
	"OPERATION_MCC" VARCHAR2(256 BYTE), 
	"ACTIVE" NUMBER(1,0), 
	"CREATE_USER" VARCHAR2(60 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_SEGMENTS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_SEGMENTS" 
   (	"SEGMENT_NAME" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"WELCOME_STATUS" CHAR(1 BYTE) DEFAULT '0', 
	"CREATE_USER" VARCHAR2(20 BYTE), 
	"UPDATE_USER" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_SEGMENTS"."SEGMENT_NAME" IS 'Nombre del segmento o Tipo de Usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_SEGMENTS"."UNIQUE_CODE" IS 'Codigo unico del usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_SEGMENTS"."WELCOME_STATUS" IS '0: True, 1: False';
--------------------------------------------------------
--  DDL for Table SMA_TEMP_OPERATIONS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" 
   (	"OPERATIONS_ID" NUMBER(10,0), 
	"CATEGORY_ID" NUMBER(10,0), 
	"ACCOUNT_ID" NUMBER(10,0), 
	"OPERATIONS_CURR_CODE" VARCHAR2(3 BYTE), 
	"OPERATIONS_COMMENT" VARCHAR2(1000 BYTE), 
	"COMMERCE_ID" NUMBER(10,0), 
	"ORIGINAL_CATEGORY_ID" NUMBER(10,0), 
	"UNIQUE_CODE_PERSONAL" VARCHAR2(20 BYTE), 
	"UNIQUE_CODE_ADDITIONAL" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(10 BYTE), 
	"TRANSFER_TYPE" NUMBER(4,0), 
	"MOVEMENT_TYPE" VARCHAR2(10 BYTE), 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"AMOUNT" NUMBER, 
	"OPERATION_DATE" DATE, 
	"TRANS_ID" VARCHAR2(80 BYTE), 
	"STATUS" CHAR(1 BYTE), 
	"APLICATION" VARCHAR2(20 BYTE), 
	"OPERATION_TYPE" CHAR(1 BYTE), 
	"ESTABLISHMENT" VARCHAR2(100 BYTE), 
	"ID_MCC" VARCHAR2(10 BYTE), 
	"OPERATION_MCC" VARCHAR2(20 BYTE), 
	"NUM_OPER" VARCHAR2(20 BYTE), 
	"STATUS_PREMIA" CHAR(1 BYTE), 
	"AMOUNT_EXCHANGED" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
   ;
--------------------------------------------------------
--  DDL for Table SMA_TEMP_STATS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TEMP_STATS" 
   (	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"CAT_ID" NUMBER, 
	"ACCOUNT_ID" NUMBER(10,0), 
	"ACCOUNT_TYPE" VARCHAR2(10 BYTE), 
	"OPERATION_TYPE" CHAR(1 BYTE), 
	"MONTH_TS" DATE, 
	"CURR_CODE" CHAR(3 BYTE), 
	"AMOUNT" NUMBER, 
	"CANTITY" NUMBER, 
	"CREATE_USER" VARCHAR2(20 BYTE), 
	"UPDATE_USER" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_CREDITS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_CREDITS" 
   (	"TMCR_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMCR_NAME" VARCHAR2(256 CHAR), 
	"TMCR_TYPE" VARCHAR2(64 CHAR), 
	"TMCR_CUR" VARCHAR2(10 CHAR), 
	"TMCR_FECHA" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_CREDITS_TX
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" 
   (	"TMCX_TRANSID" VARCHAR2(64 CHAR), 
	"TMCX_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMCX_OPERATIONDATE" DATE, 
	"TMCX_CREATEDATE" DATE, 
	"TMCX_AMOUNT" NUMBER(31,2), 
	"TMCX_AMTSIGN" VARCHAR2(10 CHAR), 
	"TMCX_CURR" VARCHAR2(10 CHAR), 
	"TMCX_NAME" VARCHAR2(256 CHAR), 
	"TMCX_CATID" NUMBER, 
	"TMCX_APPLICATION" VARCHAR2(256 CHAR), 
	"TMCX_MOVEMENT_TYPE" VARCHAR2(256 CHAR), 
	"TMCX_COD_MCC" VARCHAR2(256 CHAR), 
	"TMCX_ESTABLISHMENT" VARCHAR2(256 CHAR), 
	"TMCX_CURR_2" VARCHAR2(256 CHAR), 
	"TMCX_CREDIT_CARD" VARCHAR2(256 CHAR), 
	"TMCX_NUM_OPER" VARCHAR2(256 CHAR), 
	"TMCX_COD_PRODUCT" VARCHAR2(256 CHAR), 
	"TMCX_UNIQUE_CODE_PERS" VARCHAR2(256 CHAR), 
	"TMCX_UNIQUE_CODE_ADDI" VARCHAR2(256 CHAR), 
	"TMCX_CATRULEID" NUMBER, 
	"TMCX_CATRULEORDER" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_INCOME_SAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS" 
   (	"TMSA_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMSA_ACCOUNTNUMBER" VARCHAR2(64 CHAR), 
	"TMSA_NAME" VARCHAR2(256 CHAR), 
	"TMSA_TYPE" VARCHAR2(32 CHAR), 
	"TMSA_CUR" VARCHAR2(10 CHAR), 
	"TMSA_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_INCOME_SAVINGS_TX
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" 
   (	"TMSX_TRANSID" VARCHAR2(64 CHAR), 
	"TMSX_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMSX_OPERATIONDATE" DATE, 
	"TMSX_CREATEDATE" DATE, 
	"TMSX_AMOUNT" NUMBER(31,2), 
	"TMSX_AMTSIGN" VARCHAR2(10 CHAR), 
	"TMSX_CURR" VARCHAR2(10 CHAR), 
	"TMSX_NAME" VARCHAR2(256 CHAR), 
	"TMSX_CATID" NUMBER, 
	"TMSX_APPLICATION" VARCHAR2(256 CHAR), 
	"TMSX_MOVEMENT_TYPE" VARCHAR2(256 CHAR), 
	"TMSX_COD_MCC" VARCHAR2(256 CHAR), 
	"TMSX_ESTABLISHMENT" VARCHAR2(256 CHAR), 
	"TMSX_CURR_2" VARCHAR2(256 CHAR), 
	"TMSX_ACCOUNT_NUMBER" VARCHAR2(256 CHAR), 
	"TMSX_NUM_OPER" VARCHAR2(256 CHAR), 
	"TMSX_COD_PRODUCT" VARCHAR2(256 CHAR), 
	"TMSX_UNIQUE_CODE" VARCHAR2(256 CHAR), 
	"TMSX_OPERATION_MCC" VARCHAR2(256 CHAR), 
	"TMSX_CATRULEID" NUMBER, 
	"TMSX_CATRULEORDER" NUMBER, 
	"TMSX_CUENTA_ORDBENEF" VARCHAR2(25 BYTE), 
	"TMSX_CODUNICO_ORDBENEF" VARCHAR2(10 BYTE), 
	"TMSX_NOMBRE_ORDBENEF" VARCHAR2(40 BYTE), 
	"TMSX_CCI_ORDBENEF" VARCHAR2(30 BYTE), 
	"TMSX_TRANSF_MISMO_OTRO_CLIENTE" VARCHAR2(1 BYTE), 
	"TMSX_NOMBRE_TITULAR_CUENTA" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_INCOME_USERS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_INCOME_USERS" 
   (	"TMU_USERID" VARCHAR2(64 CHAR), 
	"TMU_FECHA" DATE, 
	"TMU_EXISTS" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_INCOME_USERSAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_INCOME_USERSAVINGS" 
   (	"TMUA_USERID" VARCHAR2(64 CHAR), 
	"TMUA_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMUA_EXISTING" NUMBER(1,0) DEFAULT 0, 
	"TMUA_FECHA" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_SAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_SAVINGS" 
   (	"TMSA_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMSA_ACCOUNTNUMBER" VARCHAR2(64 CHAR), 
	"TMSA_NAME" VARCHAR2(256 CHAR), 
	"TMSA_TYPE" VARCHAR2(32 CHAR), 
	"TMSA_CUR" VARCHAR2(10 CHAR), 
	"TMSA_PROC_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_SAVINGS_TX
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" 
   (	"TMSX_TRANSID" VARCHAR2(64 CHAR), 
	"TMSX_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMSX_OPERATIONDATE" DATE, 
	"TMSX_CREATEDATE" DATE, 
	"TMSX_AMOUNT" NUMBER(31,2), 
	"TMSX_AMTSIGN" VARCHAR2(10 CHAR), 
	"TMSX_CURR" VARCHAR2(10 CHAR), 
	"TMSX_NAME" VARCHAR2(256 CHAR), 
	"TMSX_CATID" NUMBER, 
	"TMSX_APPLICATION" VARCHAR2(256 CHAR), 
	"TMSX_MOVEMENT_TYPE" VARCHAR2(256 CHAR), 
	"TMSX_COD_MCC" VARCHAR2(256 CHAR), 
	"TMSX_ESTABLISHMENT" VARCHAR2(256 CHAR), 
	"TMSX_CURR_2" VARCHAR2(256 CHAR), 
	"TMSX_ACCOUNT_NUMBER" VARCHAR2(256 CHAR), 
	"TMSX_NUM_OPER" VARCHAR2(256 CHAR), 
	"TMSX_COD_PRODUCT" VARCHAR2(256 CHAR), 
	"TMSX_UNIQUE_CODE" VARCHAR2(256 CHAR), 
	"TMSX_OPERATION_MCC" VARCHAR2(256 CHAR), 
	"TMSX_CATRULEID" NUMBER, 
	"TMSX_CATRULEORDER" NUMBER, 
	"TMSX_CUENTA_ORDBENEF" VARCHAR2(25 BYTE), 
	"TMSX_CODUNICO_ORDBENEF" VARCHAR2(10 BYTE), 
	"TMSX_NOMBRE_ORDBENEF" VARCHAR2(40 BYTE), 
	"TMSX_CCI_ORDBENEF" VARCHAR2(30 BYTE), 
	"TMSX_TRANSF_MISMO_OTRO_CLIENTE" VARCHAR2(1 BYTE), 
	"TMSX_NOMBRE_TITULAR_CUENTA" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_USERCREDITS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_USERCREDITS" 
   (	"TMUC_USERID" VARCHAR2(64 CHAR), 
	"TMUC_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMUC_FECHA" DATE, 
	"TMUC_CARDNAME" VARCHAR2(256 CHAR), 
	"TMUC_EXISTING" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_USERS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_USERS" 
   (	"TMU_USERID" VARCHAR2(64 CHAR), 
	"TMU_FECHA" DATE, 
	"TMU_EXISTS" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TMP_USERSAVINGS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TMP_USERSAVINGS" 
   (	"TMUA_USERID" VARCHAR2(64 CHAR), 
	"TMUA_ACCOUNTID" VARCHAR2(64 CHAR), 
	"TMUA_EXISTING" NUMBER(1,0) DEFAULT 0, 
	"TMUA_FECHA" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Table SMA_TOTALIZED_STATS
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_TOTALIZED_STATS" 
   (	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"CAT_ID" NUMBER, 
	"ACCOUNT_ID" NUMBER(10,0), 
	"ACCOUNT_TYPE" VARCHAR2(10 BYTE), 
	"AMOUNT_TYPE" CHAR(1 BYTE), 
	"MONTH_TS" DATE, 
	"CURR_CODE" CHAR(3 BYTE), 
	"AMOUNT" NUMBER, 
	"CANTITY" NUMBER, 
	"CREATE_USER" VARCHAR2(20 BYTE), 
	"UPDATE_USER" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARTITION BY LIST ("MONTH_TS") 
 (PARTITION "P_201508"  VALUES (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201509"  VALUES (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201510"  VALUES (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201511"  VALUES (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201512"  VALUES (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201601"  VALUES (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201602"  VALUES (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201603"  VALUES (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201604"  VALUES (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201605"  VALUES (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201606"  VALUES (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201607"  VALUES (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201608"  VALUES (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201609"  VALUES (TO_DATE(' 2016-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201610"  VALUES (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201611"  VALUES (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201612"  VALUES (TO_DATE(' 2016-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201701"  VALUES (TO_DATE(' 2017-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201702"  VALUES (TO_DATE(' 2017-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201703"  VALUES (TO_DATE(' 2017-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201704"  VALUES (TO_DATE(' 2017-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201705"  VALUES (TO_DATE(' 2017-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201706"  VALUES (TO_DATE(' 2017-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201707"  VALUES (TO_DATE(' 2017-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201708"  VALUES (TO_DATE(' 2017-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201709"  VALUES (TO_DATE(' 2017-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201710"  VALUES (TO_DATE(' 2017-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201711"  VALUES (TO_DATE(' 2017-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201712"  VALUES (TO_DATE(' 2017-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201801"  VALUES (TO_DATE(' 2018-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201802"  VALUES (TO_DATE(' 2018-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201803"  VALUES (TO_DATE(' 2018-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201804"  VALUES (TO_DATE(' 2018-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201805"  VALUES (TO_DATE(' 2018-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201806"  VALUES (TO_DATE(' 2018-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201807"  VALUES (TO_DATE(' 2018-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201808"  VALUES (TO_DATE(' 2018-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201809"  VALUES (TO_DATE(' 2018-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201810"  VALUES (TO_DATE(' 2018-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201811"  VALUES (TO_DATE(' 2018-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201812"  VALUES (TO_DATE(' 2018-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
   , 
 PARTITION "P_201901"  VALUES (TO_DATE(' 2019-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
   , 
 PARTITION "P_201902"  VALUES (TO_DATE(' 2019-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
   , 
 PARTITION "P_201903"  VALUES (TO_DATE(' 2019-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
   , 
 PARTITION "P_201904"  VALUES (TO_DATE(' 2019-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
   , 
 PARTITION "P_201905"  VALUES (TO_DATE(' 2019-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201906"  VALUES (TO_DATE(' 2019-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201907"  VALUES (TO_DATE(' 2019-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201908"  VALUES (TO_DATE(' 2019-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201909"  VALUES (TO_DATE(' 2019-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201910"  VALUES (TO_DATE(' 2019-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201911"  VALUES (TO_DATE(' 2019-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201912"  VALUES (TO_DATE(' 2019-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202001"  VALUES (TO_DATE(' 2020-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202002"  VALUES (TO_DATE(' 2020-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202003"  VALUES (TO_DATE(' 2020-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202004"  VALUES (TO_DATE(' 2020-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;

   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."UNIQUE_CODE" IS 'Codigo Unico de Usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."CAT_ID" IS 'Codigo de categoria';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."ACCOUNT_ID" IS 'Codigo de cuenta de usuario (SMA_ACCOUNT)';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."ACCOUNT_TYPE" IS 'Tipo de Cuenta (savings,credit)';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."AMOUNT_TYPE" IS 'Tipo de Monto (0:Gasto | 1: Ingreso)';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."MONTH_TS" IS 'Mes del totalizado';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."CURR_CODE" IS 'Tipo de moneda';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."AMOUNT" IS 'Monto Sumado de Transacciones';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."CANTITY" IS 'Cantidad de Transacciones';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."CREATE_USER" IS 'Usuario de creacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."UPDATE_USER" IS 'Usuario de modificacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."CREATE_DATE" IS 'Fecha de creacion';
   COMMENT ON COLUMN "USR_ADM"."SMA_TOTALIZED_STATS"."UPDATE_DATE" IS 'Fecha de modificacion';
--------------------------------------------------------
--  DDL for Table SMA_USER
--------------------------------------------------------

  CREATE TABLE "USR_ADM"."SMA_USER" 
   (	"USER_ID" NUMBER(10,0) DEFAULT "USR_ADM"."SMA_USER_SEQ"."NEXTVAL", 
	"EMAIL" VARCHAR2(300 BYTE), 
	"FULLNAME" VARCHAR2(300 BYTE), 
	"ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"STATUS" NUMBER(1,0) DEFAULT 3, 
	"CREATE_USER" VARCHAR2(30 BYTE), 
	"UPDATE_USER" VARCHAR2(30 BYTE), 
	"CREATE_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATE_DATE" TIMESTAMP (6), 
	"UNIQUE_CODE" VARCHAR2(20 BYTE), 
	"PREFERENCE_LIMIT" CHAR(1 BYTE) DEFAULT 'G'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;

   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."USER_ID" IS 'Identificador de la tabla con secuencia:SMA_USER_SEQ';
   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."EMAIL" IS 'Correo electrónico';
   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."FULLNAME" IS 'Nombres completos del usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."ACTIVE" IS 'Borrado lógico de base de datos: 1=ACTIVO,0=BORRADO';
   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."UNIQUE_CODE" IS 'Codigo Unico de Usuario';
   COMMENT ON COLUMN "USR_ADM"."SMA_USER"."PREFERENCE_LIMIT" IS 'Flag que indica el monto a mostrar en el limite preferido. P: Presupuesto, G: Gasto Promedio';
--------------------------------------------------------
--  DDL for Index SMA_CATEGORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_CATEGORY_PK" ON "USR_ADM"."SMA_CATEGORY" ("CATEGORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMUA_INCOME_ACCOUNT_ID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_TMUA_INCOME_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_INCOME_USERSAVINGS" ("TMUA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMUA_INCOME_USAC_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMUA_INCOME_USAC_ID" ON "USR_ADM"."SMA_TMP_INCOME_USERSAVINGS" ("TMUA_USERID", "TMUA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_TEMP_STATS_PK
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_TEMP_STATS_PK" ON "USR_ADM"."SMA_TEMP_STATS" ("UNIQUE_CODE", "CAT_ID", "ACCOUNT_ID", "ACCOUNT_TYPE", "OPERATION_TYPE", "MONTH_TS", "CURR_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMP_ACCOUNT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMP_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_SAVINGS" ("TMSA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMSX_ACCOUNT_ID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_TMSX_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_SAVINGS_TX" ("TMSX_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_COMMERCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_COMMERCE_PK" ON "USR_ADM"."SMA_COMMERCE" ("COMMERCE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
   ;
--------------------------------------------------------
--  DDL for Index SMA_ACCOUNT_IDX_UNISTA
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_ACCOUNT_IDX_UNISTA" ON "USR_ADM"."SMA_ACCOUNT" ("UNIQUE_CODE", "STATUS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMUC_ACCOUNT_ID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_TMUC_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_USERCREDITS" ("TMUC_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMC_ACCOUNT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMC_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_CREDITS" ("TMCR_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_ACCOUNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_ACCOUNT_PK" ON "USR_ADM"."SMA_ACCOUNT" ("ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_COPYEXCHANGES_PROCDATE
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_COPYEXCHANGES_PROCDATE" ON "USR_ADM"."SMA_COPY_EXCHANGES" ("SMCE_PROC_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_COPYSAVINGS_PROCDATE
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_COPYSAVINGS_PROCDATE" ON "USR_ADM"."SMA_COPY_SAVINGS" ("SMCS_PROC_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX$$_544A0001
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX$$_544A0001" ON "USR_ADM"."SMA_OPERATIONS" ("ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_BUDGETS_IDX_UNICAT
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_BUDGETS_IDX_UNICAT" ON "USR_ADM"."SMA_BUDGETS" ("UNIQUE_CODE", "CAT_PARENTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_OPERATIONS_IDX_UNICOD
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_OPERATIONS_IDX_UNICOD" ON "USR_ADM"."SMA_OPERATIONS" ("UNIQUE_CODE_PERSONAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARALLEL ;
--------------------------------------------------------
--  DDL for Index SMA_EXCHANGES_IDX_CURREXCH
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_EXCHANGES_IDX_CURREXCH" ON "USR_ADM"."SMA_EXCHANGES" ("SOURCECURRENCY", "TARGETCURRENCY", "EXCHANGE_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMSX_INCOME_ACCOUNT_ID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_TMSX_INCOME_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" ("TMSX_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_ACCOUNT_IDX_PARENTID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_ACCOUNT_IDX_PARENTID" ON "USR_ADM"."SMA_CATEGORY" ("CATEGORY_PARENTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_H_OPERATIONS_IDX_FECOPE
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_H_OPERATIONS_IDX_FECOPE" ON "USR_ADM"."SMA_H_OPERATIONS" ("ACCOUNT_ID", "OPERATION_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P_20150931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;
--------------------------------------------------------
--  DDL for Index SMA_USER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_USER_PK" ON "USR_ADM"."SMA_USER" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_CATEGORY_CHANGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_CATEGORY_CHANGES_PK" ON "USR_ADM"."SMA_CATEGORY_CHANGES" ("CATEGORY_CHANGES_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_USER_UNIQUE_CODE
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_USER_UNIQUE_CODE" ON "USR_ADM"."SMA_USER" ("UNIQUE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_OPERATIONS_IDX_TRANS
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_OPERATIONS_IDX_TRANS" ON "USR_ADM"."SMA_OPERATIONS" ("TRANS_ID", "OPERATION_DATE", "ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_COPYCREDITS_PROCDATE
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_COPYCREDITS_PROCDATE" ON "USR_ADM"."SMA_COPY_CREDITS" ("SMCR_PROC_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMUA_USAC_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMUA_USAC_ID" ON "USR_ADM"."SMA_TMP_USERSAVINGS" ("TMUA_USERID", "TMUA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_ACCOUNT_IDX_UNICOD
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_ACCOUNT_IDX_UNICOD" ON "USR_ADM"."SMA_ACCOUNT" ("UNIQUE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_OPERATIONS_IDX_FECAPP
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_OPERATIONS_IDX_FECAPP" ON "USR_ADM"."SMA_OPERATIONS" ("OPERATION_DATE", "APLICATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARALLEL ;
--------------------------------------------------------
--  DDL for Index IDX_TMUA_ACCOUNT_ID
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."IDX_TMUA_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_USERSAVINGS" ("TMUA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMSX_INCOME_TRANS_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMSX_INCOME_TRANS_ID" ON "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" ("TMSX_TRANSID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMSX_TRANS_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMSX_TRANS_ID" ON "USR_ADM"."SMA_TMP_SAVINGS_TX" ("TMSX_TRANSID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_EXCHANGES_IDX_TARGET
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_EXCHANGES_IDX_TARGET" ON "USR_ADM"."SMA_EXCHANGES" ("TARGETCURRENCY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMP_INCOME_ACCOUNT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMP_INCOME_ACCOUNT_ID" ON "USR_ADM"."SMA_TMP_INCOME_SAVINGS" ("TMSA_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_H_BUDGETS_IDX_MONTH
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_H_BUDGETS_IDX_MONTH" ON "USR_ADM"."SMA_H_BUDGETS" ("MONTH_BG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P_201903" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201904" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201905" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201906" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201907" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201908" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201909" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201910" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201911" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201912" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202001" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202002" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202003" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202004" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;
--------------------------------------------------------
--  DDL for Index SMA_SEGMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_SEGMENTS_PK" ON "USR_ADM"."SMA_SEGMENTS" ("UNIQUE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_OPERATIONS_IDX_FECOPE
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_OPERATIONS_IDX_FECOPE" ON "USR_ADM"."SMA_OPERATIONS" ("ACCOUNT_ID", "OPERATION_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P_20150931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20151231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20160931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20161231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20170931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20171231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20180931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20181231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190431" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190531" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190631" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190731" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190831" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20190931" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191031" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20191231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 8388608 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200131" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200231" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_20200331" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;
--------------------------------------------------------
--  DDL for Index SMA_BUDGETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_BUDGETS_PK" ON "USR_ADM"."SMA_BUDGETS" ("BUDGET_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_BANK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_BANK_PK" ON "USR_ADM"."SMA_BANK" ("BANK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMCX_TRANS_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMCX_TRANS_ID" ON "USR_ADM"."SMA_TMP_CREDITS_TX" ("TMCX_TRANSID", "TMCX_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_EXCHANGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_EXCHANGES_PK" ON "USR_ADM"."SMA_EXCHANGES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_H_OPERATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_H_OPERATIONS_PK" ON "USR_ADM"."SMA_H_OPERATIONS" ("OPERATIONS_ID", "ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_H_BUDGETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_H_BUDGETS_PK" ON "USR_ADM"."SMA_H_BUDGETS" ("H_BUDGETS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index IDX_TMU_INCOME_USERID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMU_INCOME_USERID" ON "USR_ADM"."SMA_TMP_INCOME_USERS" ("TMU_USERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_TS_LOCAL_PK
--------------------------------------------------------

  CREATE INDEX "USR_ADM"."SMA_TS_LOCAL_PK" ON "USR_ADM"."SMA_TOTALIZED_STATS" ("UNIQUE_CODE", "CAT_ID", "ACCOUNT_ID", "ACCOUNT_TYPE", "AMOUNT_TYPE", "MONTH_TS", "CURR_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P_201508" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201509" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201510" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201511" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201512" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201601" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201602" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201603" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201604" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201605" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201606" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201607" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201608" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201609" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201610" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201611" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201612" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201701" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201702" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201703" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201704" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201705" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201706" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201707" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201708" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201709" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201710" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201711" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201712" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201801" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201802" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201803" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201804" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201805" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201806" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201807" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201808" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201809" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201810" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201811" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201812" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201901" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201902" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201903" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201904" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201905" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201906" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201907" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201908" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201909" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201910" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201911" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201912" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202001" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202002" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202003" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202004" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ) ;
--------------------------------------------------------
--  DDL for Index IDX_TMU_USERID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMU_USERID" ON "USR_ADM"."SMA_TMP_USERS" ("TMU_USERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_OPERATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_OPERATIONS_PK" ON "USR_ADM"."SMA_OPERATIONS" ("OPERATIONS_ID", "ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   
  PARALLEL ;
--------------------------------------------------------
--  DDL for Index IDX_TMUC_USAC_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."IDX_TMUC_USAC_ID" ON "USR_ADM"."SMA_TMP_USERCREDITS" ("TMUC_USERID", "TMUC_ACCOUNTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   ;
--------------------------------------------------------
--  DDL for Index SMA_TEMP_OPERATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USR_ADM"."SMA_TEMP_OPERATIONS_PK" ON "USR_ADM"."SMA_TEMP_OPERATIONS" ("OPERATIONS_ID", "ACCOUNT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
   
  PARALLEL ;
--------------------------------------------------------
--  DDL for Index SMA_H_BUDGETS_IDX_UCM
--------------------------------------------------------

  -- CREATE INDEX "USR_ADM"."SMA_H_BUDGETS_IDX_UCM" ON "USR_ADM"."SMA_H_BUDGETS" ("UNIQUE_CODE", "CAT_PARENTID", "MONTH_BG") 
  -- PCTFREE 10 INITRANS 2 MAXTRANS 255 
  -- STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  -- PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  -- BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
--------------------------------------------------------
--  DDL for Procedure PRC_BUDGET_SUGGESTED
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_BUDGET_SUGGESTED" (PI_USER IN VARCHAR2, PI_FORCED IN CHAR DEFAULT NULL) IS

    V_CONFIG_MONTHS_BUDGET NUMBER := -3;
    V_EXECUTION_BUDGET CHAR(1) := 0;
    PARTITION_NAME varchar2(10);
    V_EXISTS_PARTITION NUMBER := 0;
    
	BEGIN
    
    select 'P_'||to_char(ADD_MONTHS(SYSDATE,1),'YYYYMM') INTO PARTITION_NAME from dual;
    EXECUTE IMMEDIATE 'select count(1)  from user_ind_partitions t
    where t.index_name = ''SMA_H_BUDGETS_IDX_MONTH'' and T.PARTITION_NAME =''' || PARTITION_NAME || '''' INTO V_EXISTS_PARTITION;

    if V_EXISTS_PARTITION = 0 THEN
        DBMS_OUTPUT.put_line('Creando Particion en SMA_H_BUDGETS: ' || PARTITION_NAME);
        EXECUTE IMMEDIATE 'ALTER TABLE SMA_H_BUDGETS ADD PARTITION ' || PARTITION_NAME || ' VALUES
        (
        TO_DATE(''' || TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,1),'mm'),'YYYY-MM-DD') || ' 00:00:00'', ''SYYYY-MM-DD HH24:MI:SS'', ''NLS_CALENDAR=GREGORIAN'')
        )';
    end if;
    
	  V_EXECUTION_BUDGET :=   CASE WHEN TRUNC(SYSDATE) IN 
							  (next_day(TRUNC(sysdate, 'mm') - 1, 'FRIDAY'),
							  next_day(TRUNC(sysdate, 'mm') - 1, 'TUESDAY')) THEN
								'1'
							  ELSE V_EXECUTION_BUDGET
							  END;           

	  IF V_EXECUTION_BUDGET = '1' OR PI_FORCED = 'F' THEN

		MERGE INTO SMA_H_BUDGETS HB
		  USING ( SELECT
					UNIQUE_CODE,
					CAT_PARENTID,
					TRUNC(TRUNC(SYSDATE,'mm')-1,'mm') MONTH_BG,
					VALUE_SUGGESTED,
					VALUE_MANUAL,
					STATUS
				  FROM SMA_BUDGETS) X
			  ON (X.UNIQUE_CODE = HB.UNIQUE_CODE AND X.CAT_PARENTID = HB.CAT_PARENTID AND X.MONTH_BG = HB.MONTH_BG)
		  WHEN MATCHED THEN
			UPDATE SET HB.VALUE_SUGGESTED = X.VALUE_SUGGESTED, UPDATE_USER = PI_USER, UPDATE_DATE = SYSDATE
			WHERE HB.VALUE_SUGGESTED = 0
		  WHEN NOT MATCHED THEN
			INSERT (UNIQUE_CODE, CAT_PARENTID, MONTH_BG, VALUE_SUGGESTED, VALUE_MANUAL, STATUS, CREATE_DATE, CREATE_USER)
			  VALUES
			  (X.UNIQUE_CODE,X.CAT_PARENTID,X.MONTH_BG,X.VALUE_SUGGESTED,X.VALUE_MANUAL,X.STATUS,SYSDATE, PI_USER);
		  DBMS_OUTPUT.put_line('SMA_H_BUDGETS MERGE: ' || SQL%ROWCOUNT); 
		COMMIT;

		MERGE INTO SMA_BUDGETS B
		  USING (  SELECT cat_id, usr_id, cat_name ,ROUND(avg(g_value),2) promedio from (
					select C.CATEGORY_PARENTID as cat_id,TS.UNIQUE_CODE as usr_id,ROUND(sum(TS.AMOUNT),2) as g_value, C1.CATEGORY_NAME as cat_name
					  from  SMA_TOTALIZED_STATS TS
							, SMA_CATEGORY C
							, SMA_CATEGORY C1
					  where TS.AMOUNT_TYPE='0'
						and TS.MONTH_TS between add_months(trunc(sysdate,'MONTH'),V_CONFIG_MONTHS_BUDGET) and add_months(trunc(sysdate,'MONTH'),-1)
						and TS.cat_id = C.catEGORY_id
						and C.CATEGORY_LEVEL = 0
						AND C.CATEGORY_PARENTID = C1.CATEGORY_ID
					  group by TS.UNIQUE_CODE,C.CATEGORY_PARENTID,C1.CATEGORY_NAME,TS.MONTH_TS
					  ) group by cat_id, usr_id, cat_name ) X
		  ON (X.USR_ID = B.UNIQUE_CODE AND X.CAT_ID = B.CAT_PARENTID)
		WHEN MATCHED THEN
		  UPDATE SET VALUE_SUGGESTED = X.PROMEDIO, UPDATE_USER = PI_USER, UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		  INSERT (BUDGET_ID,UNIQUE_CODE,CAT_PARENTID,VALUE_SUGGESTED,STATUS,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
		  VALUES (SMA_BUDGETS_SEQ.NEXTVAL,X.USR_ID,X.CAT_ID,X.PROMEDIO,'S',PI_USER,SYSDATE,PI_USER,SYSDATE);

		DBMS_OUTPUT.put_line('SMA_BUDGETS MERGE: ' || SQL%ROWCOUNT); 
		COMMIT;

	  ELSE

		DBMS_OUTPUT.put_line('El calculo de presupuesto sugerido no fue ejecutado');

	  END IF;

	EXCEPTION WHEN OTHERS THEN

	  DBMS_OUTPUT.put_line('ERROR en la creacion del presupuesto sugerido: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace);

	END PRC_BUDGET_SUGGESTED;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CATEGORIZACION_INT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_CATEGORIZACION_INT" (
    tabla IN VARCHAR2
) IS

    t1              PLS_INTEGER;
    TYPE t_tbl_rowid IS
        TABLE OF UROWID;
    TYPE t_tbl_catid IS
        TABLE OF NUMBER;
    TYPE t_tbl_ruleid IS
        TABLE OF NUMBER;
    TYPE t_tbl_ruleorder IS
        TABLE OF NUMBER;
    tbl_rowid       t_tbl_rowid;
    tbl_catid       t_tbl_catid;
    tbl_ruleid      t_tbl_ruleid;
    tbl_ruleorder   t_tbl_ruleorder;
    rowcount        NUMBER := 0;
    cur_step1       SYS_REFCURSOR;
    cur_step2       SYS_REFCURSOR;
    cur_step3       SYS_REFCURSOR;
    cur_step4       SYS_REFCURSOR;
    cur_step5       SYS_REFCURSOR;
    cur_step6       SYS_REFCURSOR;
BEGIN
    IF tabla = 'SMA_TMP_CREDITS_TX' THEN
        OPEN cur_step1 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND lower(tmcx_name) LIKE lower(name) -- GLOSA
                               AND tmcx_cod_mcc = cod_mcc      -- MCC
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step1 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step1%rowcount;
            rowcount := cur_step1%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step1;
        rowcount := 0;
        OPEN cur_step2 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND lower(tmcx_name) LIKE lower(name) -- GLOSA
                               AND tmcx_application = application      -- APLICACION ORIGEN
                               AND tmcx_movement_type = movement_type      -- TIPO DE OPERACIÓN O MOVIMIENTO
                               AND operation_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step2 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step2%rowcount;
            rowcount := cur_step2%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step2;
        rowcount := 0;
        OPEN cur_step3 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND lower(tmcx_name) LIKE lower(name) -- GLOSA
                               AND tmcx_application = application      -- APLICACION ORIGEN
                               AND operation_type IS NULL
                               AND movement_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step3 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step3%rowcount;
            rowcount := cur_step3%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step3;
        rowcount := 0;
        OPEN cur_step4 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND lower(tmcx_name) LIKE lower(name) -- GLOSA
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step4 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step4%rowcount;
            rowcount := cur_step4%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step4;
        rowcount := 0;
        OPEN cur_step5 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND tmcx_cod_mcc = cod_mcc -- MCC
                               AND name IS NULL
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step5 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step5%rowcount;
            rowcount := cur_step5%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step5;
        rowcount := 0;
        OPEN cur_step6 FOR SELECT
                               sct.rowid,
                               crc.id,
                               c_order,
                               cat_id
                           FROM
                               sma_tmp_credits_tx sct,
                               sma_rules_credits crc
                           WHERE
                               sct.tmcx_catid IS NULL
                               AND tmcx_application = application -- APLICACION
                               AND tmcx_movement_type = movement_type -- TIPO DE OPERACION
                               AND name IS NULL
                               AND operation_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND credit_card IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code_pers IS NULL
                               AND unique_code_adit IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step6 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step6%rowcount;
            rowcount := cur_step6%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_credits_tx sct
                SET
                    tmcx_catid = tbl_catid(i),
                    tmcx_catruleid = tbl_ruleid(i),
                    tmcx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sct.rowid = tbl_rowid(i)
                    AND ( tmcx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmcx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step6;
    END IF;  
      
      ---- SAVINGS

    IF tabla = 'SMA_TMP_SAVINGS_TX' THEN
        OPEN cur_step1 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND lower(tmsx_name) LIKE lower(name)
                               AND tmsx_cod_mcc = cod_mcc
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step1 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step1%rowcount;
            rowcount := cur_step1%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step1;
        rowcount := 0;
        OPEN cur_step2 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND lower(tmsx_name) LIKE lower(name)
                               AND tmsx_application = application
                               AND tmsx_movement_type = movement_type
                               AND operation_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step2 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step2%rowcount;
            rowcount := cur_step2%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step2;
        rowcount := 0;
        OPEN cur_step3 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND lower(tmsx_name) LIKE lower(name)
                               AND tmsx_application = application
                               AND operation_type IS NULL
                               AND movement_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step3 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step3%rowcount;
            rowcount := cur_step3%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step3;
        rowcount := 0;
        OPEN cur_step4 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND lower(tmsx_name) LIKE lower(name)
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step4 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step4%rowcount;
            rowcount := cur_step4%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step4;
        rowcount := 0;
        OPEN cur_step5 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND tmsx_cod_mcc = cod_mcc
                               AND name IS NULL
                               AND operation_type IS NULL
                               AND application IS NULL
                               AND movement_type IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step5 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step5%rowcount;
            rowcount := cur_step5%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step5;
        rowcount := 0;
        OPEN cur_step6 FOR SELECT
                               sat.rowid,
                               cra.id,
                               s_order,
                               cat_id
                           FROM
                               sma_tmp_savings_tx sat,
                               sma_rules_savings cra
                           WHERE
                               sat.tmsx_catid IS NULL
                               AND tmsx_application = application
                               AND tmsx_movement_type = movement_type
                               AND name IS NULL
                               AND operation_type IS NULL
                               AND cod_mcc IS NULL
                               AND establishment IS NULL
                               AND curr_2 IS NULL
                               AND account_number IS NULL
                               AND num_oper IS NULL
                               AND cod_product IS NULL
                               AND unique_code IS NULL
                               AND operation_mcc IS NULL
                               AND active = 1;

        LOOP
            FETCH cur_step6 BULK COLLECT INTO
                tbl_rowid,
                tbl_ruleid,
                tbl_ruleorder,
                tbl_catid
            LIMIT 10000;
            EXIT WHEN rowcount = cur_step6%rowcount;
            rowcount := cur_step6%rowcount;
            FORALL i IN tbl_rowid.first..tbl_rowid.last
                UPDATE sma_tmp_savings_tx sat
                SET
                    tmsx_catid = tbl_catid(i),
                    tmsx_catruleid = tbl_ruleid(i),
                    tmsx_catruleorder = tbl_ruleorder(i)
                WHERE
                    sat.rowid = tbl_rowid(i)
                    AND ( tmsx_catruleorder IS NULL
                          OR tbl_ruleorder(i) < tmsx_catruleorder );

            COMMIT;
        END LOOP;

        CLOSE cur_step6;
    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CHARGE_INCOME_SMART
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_CHARGE_INCOME_SMART" (PI_FECHA in varchar2,PI_ESQUEMA IN VARCHAR2, PI_TABLESPACE IN VARCHAR2, PO_MENSAJE OUT VARCHAR2)AS

    V_USER VARCHAR2(20) := 'USR_ADM';
    V_ESQUEMA VARCHAR2(20) := PI_ESQUEMA;
    V_TABLESPACE VARCHAR2(20) := PI_TABLESPACE;
    V_CONFIG_DAYS_EXCHANGE  NUMBER := 180;

    V_DAY char(3) := TO_CHAR(sysdate, 'DY');
    V_FECHA_FIN DATE;
    PARTITION_NAME varchar2(10);
    V_EXISTS_PARTITION NUMBER := 0;

    V_CAT_ID_OTROS NUMBER := 503;
    V_CAT_ID_SUELDO NUMBER := 511;
    V_GLOSA_SUELDO VARCHAR2(256) := 'PPL PLANILLA';

    V_MONTH date;
    V_NO_CATEGORY NUMBER := 24; --0 NO CATEGORY | 24 OTROS 

    cursor C_MONTHS is
            select distinct trunc(TMSX_OPERATIONDATE,'MONTH') mes_tx
            from SMA_TMP_INCOME_SAVINGS_TX sat
            group by  trunc(TMSX_OPERATIONDATE,'MONTH')
            order by 1 desc;

    v_Data       DBMS_OUTPUT.CHARARR;
    v_NumLines   NUMBER := 5000;
    t1 pls_integer;

BEGIN

    dbms_output.enable();
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_INCOME_USERS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_INCOME_USERSAVINGS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_INCOME_SAVINGS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_INCOME_SAVINGS_TX reuse storage';

    --********************************TABLAS TEMPORALES*****************************************
    DBMS_OUTPUT.put_line('[TABLAS TEMPORALES]');

    INSERT /*+ append */ INTO SMA_TMP_INCOME_USERS (TMU_USERID,TMU_FECHA)
    select distinct substr(SMCM_UNIQUECODECLI, length(SMCM_UNIQUECODECLI)-9, 10), trunc(sysdate)
    from SMA_COPY_MOVCTAS
    where SMCM_PROC_DATE = trunc(sysdate) and SMCM_UNIQUECODECLI is not null;
    DBMS_OUTPUT.put_line('SMA_TMP_INCOME_USERS: ' || SQL%ROWCOUNT);
    COMMIT;

    INSERT /*+ append */ INTO SMA_TMP_INCOME_USERSAVINGS (TMUA_USERID,TMUA_ACCOUNTID,TMUA_FECHA)
    select distinct substr(SMCM_UNIQUECODECLI, length(SMCM_UNIQUECODECLI)-9, 10),
          SMCM_ACCOUNTCODE || '00' || substr(SMCM_UNIQUECODECLI, length(SMCM_UNIQUECODECLI)-9, 10),
          trunc(sysdate)
    from SMA_COPY_MOVCTAS
    where SMCM_PROC_DATE = trunc(sysdate) and SMCM_UNIQUECODECLI is not null;
    DBMS_OUTPUT.put_line('SMA_TMP_INCOME_USERSAVINGS: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_INCOME_SAVINGS (TMSA_ACCOUNTID, TMSA_NAME, TMSA_TYPE, TMSA_CUR, TMSA_PROC_DATE, TMSA_ACCOUNTNUMBER)
    select distinct SMCM_ACCOUNTCODE || '00' || substr(SMCM_UNIQUECODECLI, length(SMCM_UNIQUECODECLI)-9, 10) AS TMSA_ACCOUNTID, 
            pdd.CATALOG_description AS TMSA_NAME, 'savings' AS TMSA_TYPE, mdd.CATALOG_description AS TMSA_CUR, 
            trunc(sysdate) AS TMSA_PROC_DATE, substr(SMCM_ACCOUNTCODE, length(SMCM_ACCOUNTCODE) - 13, 14) AS TMSA_ACCOUNTNUMBER
    from SMA_COPY_MOVCTAS MOVCT, SMA_COPY_MAESTRO MTS, SMA_CATALOG pdd, SMA_CATALOG mdd
    where MTS.SMCM_ACCOUNT_NUMBER = MOVCT.SMCM_ACCOUNTCODE
    and (MTS.SMCM_COD_PRODUCT || MTS.SMCM_COD_CURRENCY) = pdd.CATALOG_ID
    and MOVCT.SMCM_CURRENCYCODE_ORIG = mdd.CATALOG_ID
    and mdd.CATALOG_APPLICATION = 'SAV'
    and mdd.CATALOG_TYPE = 'Moneda'
    and pdd.CATALOG_TYPE = 'Producto'
    and MOVCT.SMCM_PROC_DATE = trunc(sysdate);
    DBMS_OUTPUT.put_line('SMA_TMP_INCOME_SAVINGS: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_INCOME_SAVINGS_TX str
    (TMSX_transid,TMSX_accountid, TMSX_OPERATIONDATE, TMSX_createdate, TMSX_AMOUNT, TMSX_amtsign, TMSX_CURR,
    TMSX_name, TMSX_APPLICATION, TMSX_MOVEMENT_TYPE, TMSX_COD_MCC, TMSX_ESTABLISHMENT,TMSX_CURR_2, TMSX_ACCOUNT_NUMBER,
    TMSX_NUM_OPER, TMSX_COD_PRODUCT, TMSX_UNIQUE_CODE, TMSX_OPERATION_MCC,
    TMSX_CUENTA_ORDBENEF, TMSX_CODUNICO_ORDBENEF, TMSX_NOMBRE_ORDBENEF, TMSX_CCI_ORDBENEF, TMSX_TRANSF_MISMO_OTRO_CLIENTE, TMSX_NOMBRE_TITULAR_CUENTA)
    select MVS.SMCM_EVENTID AS TMSX_transid, 
          (MVS.SMCM_ACCOUNTCODE || '00' || substr(MVS.SMCM_UNIQUECODECLI, length(MVS.SMCM_UNIQUECODECLI)-9, 10)) AS TMSX_accountid,
          MVS.SMCM_STARTDATE AS TMSX_OPERATIONDATE, 
          MVS.SMCM_DATEINFO AS TMSX_createdate,
          (to_number(substr(MVS.SMCM_TRANSAMOUNT, 0, length(MVS.SMCM_TRANSAMOUNT) - 2)) + to_number(substr(MVS.SMCM_TRANSAMOUNT, length(MVS.SMCM_TRANSAMOUNT) - 1, 2))/100) AS TMSX_AMOUNT,
          MVS.SMCM_SIGNAMOUNT AS TMSX_amtsign, 
          CATL.CATALOG_DESCRIPTION AS TMSX_CURR, 
          rtrim(DECODE(MVS.SMCM_TRANSCODE, '0360', nvl(MVS.SMCM_EVENTDESC, MVS.SMCM_TRANSDESC), '5392', nvl(MVS.SMCM_EVENTDESC, MVS.SMCM_TRANSDESC), MVS.SMCM_EVENTDESC)) AS TMSX_name,
          'SAV' as TMSX_APPLICATION, 
          MVS.SMCM_TRANSCODE as TMSX_MOVEMENT_TYPE, 
          null as TMSX_COD_MCC, 
          nvl(MVS.SMCM_EVENTDESC, MVS.SMCM_TRANSDESC) AS TMSX_ESTABLISHMENT, 
          null as TMSX_CURR_2, 
          substr(SMCM_ACCOUNTCODE,  length(SMCM_ACCOUNTCODE) - 13, 14) as TMSX_ACCOUNT_NUMBER, 
          null as TMSX_NUM_OPER, 
          (MTS.SMCM_COD_PRODUCT || MTS.SMCM_COD_CURRENCY) AS TMSX_COD_PRODUCT, 
          MVS.SMCM_UNIQUECODECLI AS TMSX_UNIQUE_CODE, 
          null as TMSX_OPERATION_MCC,
          MVS.SMCM_CUENTA_ORDBENEF AS TMSX_CUENTA_ORDBENEF, 
          MVS.SMCM_CODUNICO_ORDBENEF AS TMSX_CODUNICO_ORDBENEF, 
          MVS.SMCM_NOMBRE_ORDBENEF AS TMSX_NOMBRE_ORDBENEF, 
          MVS.SMCM_CCI_ORDBENEF AS TMSX_CCI_ORDBENEF, 
          MVS.SMCM_TRANSF_MISMO_OTRO_CLIENTE AS TMSX_TRANSF_MISMO_OTRO_CLIENTE, 
          MVS.SMCM_NOMBRE_TITULAR_CUENTA AS TMSX_NOMBRE_TITULAR_CUENTA
    from SMA_COPY_MOVCTAS MVS, SMA_COPY_MAESTRO MTS, SMA_CATALOG CATL
    where MVS.SMCM_ACCOUNTCODE = MTS.SMCM_ACCOUNT_NUMBER
    and MVS.SMCM_CURRENCYCODE_ORIG = CATL.CATALOG_ID
    and MVS.SMCM_SOURCEAPP = 'SAVINGS'
    and CATL.CATALOG_APPLICATION = 'SAV'
    and CATL.CATALOG_TYPE = 'Moneda'
    and MVS.SMCM_PROC_DATE = to_date(PI_FECHA,'yyyymmdd');
    DBMS_OUTPUT.put_line('SMA_TMP_INCOME_SAVINGS_TX: ' || SQL%ROWCOUNT);
    COMMIT;

    update SMA_TMP_INCOME_USERS sru set TMU_EXISTS = 1
    where exists(select 1 from SMA_USER u where u.UNIQUE_CODE = sru.TMU_USERID);
    commit;

    update SMA_TMP_INCOME_USERSAVINGS srua set TMUA_existing = 1
    where (srua.TMUA_USERID, srua.TMUA_accountid) in (select sua.TMUA_userid, sua.TMUA_accountid
                                                        from SMA_TMP_INCOME_USERSAVINGS sua, SMA_ACCOUNT sa, SMA_USER u
                                                        where sa.USER_ID = u.USER_ID and
                                                        sua.TMUA_userid = u.UNIQUE_CODE and
                                                        sua.TMUA_accountid = sa.CCI);
    commit;

    --********************************CATEGORIZACION***************************************** ##########################################################
    DBMS_OUTPUT.put_line('[CATEGORIZACION]');

    t1 := dbms_utility.get_time;
    UPDATE SMA_TMP_INCOME_SAVINGS_TX TXS
    SET (tmsx_catid) = ( SELECT (case TO_CHAR(trim(TMSX_NAME)) WHEN V_GLOSA_SUELDO THEN V_CAT_ID_SUELDO ELSE V_CAT_ID_OTROS END) AS CATID
                          FROM SMA_TMP_INCOME_SAVINGS_TX sat
                          WHERE sat.rowid = TXS.rowid)
    WHERE TXS.tmsx_catid IS NULL AND EXISTS( SELECT 1 FROM SMA_TMP_INCOME_SAVINGS_TX sat WHERE sat.rowid = TXS.rowid);

    DBMS_OUTPUT.put_line('Categorizacion de Savings income en: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

    --********************************TABLAS FINALES*****************************************
    DBMS_OUTPUT.put_line('[TABLAS FINALES]');

    BEGIN
        --Validando la particion para las operaciones a insertar
        OPEN C_MONTHS;
            LOOP
            fetch C_MONTHS into V_MONTH;
            exit when C_MONTHS%notfound;

                select trunc(add_months(V_MONTH,1),'mm')-1/24/60/60 into V_FECHA_FIN from dual;
                select 'P_'||to_char(V_FECHA_FIN,'YYYYMM')||'31' into PARTITION_NAME from dual;

                EXECUTE IMMEDIATE 'select count(1)  from user_ind_partitions t
                      where t.index_name = ''SMA_OPERATIONS_IDX_FECOPE'' and T.PARTITION_NAME =''' || PARTITION_NAME || '''' INTO V_EXISTS_PARTITION;

                if V_EXISTS_PARTITION = 0 THEN
                          DBMS_OUTPUT.put_line('Creando Particion en SMA_OPERATIONS: ' || PARTITION_NAME);
                          EXECUTE IMMEDIATE 'ALTER TABLE SMA_OPERATIONS ADD PARTITION ' || PARTITION_NAME || '  VALUES less than
                          (
                            TO_DATE(''' || TO_CHAR(V_FECHA_FIN+1,'YYYY-MM-DD') || ' 00:00:00'', ''SYYYY-MM-DD HH24:MI:SS'', ''NLS_CALENDAR=GREGORIAN'')
                          )
                         tablespace ' || V_TABLESPACE || '
                         pctfree 10
                         initrans 1
                         maxtrans 255
                         storage
                         (
                           initial 8M
                           next 1M
                           minextents 1
                           maxextents unlimited
                         )';
            end if;
            END LOOP;
        CLOSE C_MONTHS;

    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Error al evaluar particion en SMA_OPERATIONS: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace);
    END;


    MERGE into SMA_USER u
    using (select tmu_userid from SMA_TMP_INCOME_USERS) su
    on (u.UNIQUE_CODE = su.tmu_userid)
    when not matched then
    INSERT (USER_ID,UNIQUE_CODE,CREATE_USER,CREATE_DATE)
    values (SMA_USER_SEQ.nextval,tmu_userid,V_USER,SYSDATE);
    DBMS_OUTPUT.put_line('SMA_USER INSERT: ' || SQL%ROWCOUNT);
    COMMIT;


    MERGE INTO SMA_EXCHANGES CEX
    USING (
        WITH Z AS
        ( SELECT DISTINCT edd.CATALOG_description AS SCE_SOURCECURRENCY,
        psce.SMCE_targetcurrency AS SCE_TARGETCURRENCY,
        psce.SMCE_exchange AS SCE_EXCHANGE,
        psce.SMCE_exchangedate AS SCE_EXCHANGEDATE
        FROM SMA_COPY_EXCHANGES psce,
        SMA_CATALOG edd
        WHERE psce.SMCE_proc_date    = to_date(PI_FECHA,'yyyymmdd')
        AND psce.SMCE_sourcecurrency = edd.CATALOG_ID
        AND edd.CATALOG_type             = 'Moneda'
        AND edd.CATALOG_APPLICATION              = 'CAM'
        UNION
        SELECT 'PEN' ,
        'PEN' ,
        1 ,
        TRUNC(sysdate)  FROM DUAL)
        SELECT  sce_sourcecurrency    AS src
        ,    sce_targetcurrency    AS tgt
        ,    sce_exchange      AS exc
        ,    sce_exchangedate    AS dat
        FROM  Z      SCE
        WHERE  SCE.sce_exchangedate = (SELECT  MAX(SCE2.sce_exchangedate)
                                  FROM  Z     SCE2
                                  WHERE  SCE2.sce_sourcecurrency = SCE.sce_sourcecurrency
                                         AND     SCE2.sce_targetcurrency = SCE.sce_targetcurrency )
        UNION
        SELECT  sce_targetcurrency    AS src
        ,    sce_sourcecurrency    AS tgt
        ,    1 / sce_exchange    AS exc
        ,    sce_exchangedate    AS dat
        FROM  Z      SCE
        WHERE  SCE.sce_exchangedate = (SELECT  MAX(SCE2.sce_exchangedate)
                                  FROM  Z SCE2
                                  WHERE  SCE2.sce_sourcecurrency = SCE.sce_sourcecurrency
                                         AND     SCE2.sce_targetcurrency = SCE.sce_targetcurrency)
          AND     NOT EXISTS (SELECT  1
                             FROM  Z  SCE3
                             WHERE  SCE3.sce_sourcecurrency = sce.sce_targetcurrency
                                    AND     SCE3.sce_targetcurrency = sce.sce_sourcecurrency)
        UNION

        SELECT  distinct SCE2.sce_targetcurrency    AS src
        ,    SCE1.SCE_sourcecurrency    AS tgt
        ,    1/(sce2.sce_exchange*SCE1.SCE_EXCHANGE)    AS exc
        ,    max(SCE2.sce_exchangedate)    AS dat
        FROM  Z      SCE1,Z SCE2
        WHERE  SCE1.SCE_exchangedate = SCE2.sce_exchangedate
          and SCE1.SCE_sourcecurrency != 'USD'
          and SCE2.sce_targetcurrency != 'USD'
          and SCE1.SCE_targetcurrency = 'USD'
        group by SCE2.sce_targetcurrency,SCE1.SCE_sourcecurrency,1/(sce2.sce_exchange*SCE1.SCE_EXCHANGE)
        UNION

        SELECT  distinct SCE1.SCE_sourcecurrency    AS src
        ,    SCE2.sce_targetcurrency    AS tgt
        ,    sce2.sce_exchange*SCE1.SCE_EXCHANGE    AS exc
        ,    max(SCE2.SCE_exchangedate)  AS dat
        FROM  Z      SCE1,Z SCE2
        WHERE  (SCE1.SCE_exchangedate) = trunc(SCE2.sce_exchangedate)
          and SCE1.SCE_sourcecurrency != 'USD'
          and SCE2.sce_targetcurrency != 'USD'
          and SCE1.SCE_targetcurrency = 'USD'
          and  NOT EXISTS (SELECT  1
                             FROM  Z  SCE3
                             WHERE  SCE3.sce_sourcecurrency = sce2.sce_targetcurrency
                                    AND     SCE3.sce_targetcurrency = sce2.sce_sourcecurrency)
          group by  SCE1.SCE_sourcecurrency,SCE2.sce_targetcurrency,sce2.sce_exchange*SCE1.SCE_EXCHANGE
                                    )     X
        ON ( X.src = CEX.sourcecurrency AND X.tgt = CEX.targetcurrency AND x.dat = CEX.EXCHANGE_DATE)
        WHEN MATCHED THEN
        UPDATE SET   CEX.VALOR = X.exc
        ,       CEX.UPDATE_DATE = SYSDATE
        WHERE   X.dat = CEX.Exchange_date
        WHEN NOT MATCHED THEN
        INSERT (  id            , sourcecurrency  , targetcurrency
            , VALOR          , exchange_date    , CREATE_date
            , UPDATE_date)
        VALUES (  SMA_EXCHANGE_SEQ.NEXTVAL  , X.src          , X.tgt
            , X.exc              , X.dat          , SYSDATE
            , SYSDATE);
    DBMS_OUTPUT.put_line('SMA_EXCHANGES MERGE: ' || SQL%ROWCOUNT);
    COMMIT;

    if V_DAY = 'FRI' then
        MERGE INTO SMA_EXCHANGES SMEX
        USING (
          SELECT 'PEN' AS sourcecurrency, 'PEN' AS targetcurrency, 1 AS VALOR, trunc(sysdate+1) AS exchange_date, SYSDATE AS CREATE_date, SYSDATE AS UPDATE_date
          FROM dual
          UNION
          SELECT 'PEN' AS sourcecurrency, 'PEN' AS targetcurrency, 1 AS VALOR, trunc(sysdate+2) AS exchange_date, SYSDATE AS CREATE_date, SYSDATE AS UPDATE_date
          FROM dual
          UNION
          SELECT 'PEN' AS sourcecurrency, 'PEN' AS targetcurrency, 1 AS VALOR, trunc(sysdate+3) AS exchange_date, SYSDATE AS CREATE_date, SYSDATE AS UPDATE_date
          FROM dual
        ) DTS
        ON (SMEX.exchange_date = DTS.exchange_date AND SMEX.sourcecurrency = DTS.sourcecurrency AND SMEX.targetcurrency = DTS.targetcurrency)
        WHEN NOT MATCHED THEN
        INSERT (id, sourcecurrency, targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
        VALUES (SMA_EXCHANGE_SEQ.NEXTVAL, DTS.sourcecurrency, DTS.targetcurrency, DTS.VALOR, DTS.exchange_date, DTS.CREATE_date, DTS.UPDATE_date);

    end if;
    DBMS_OUTPUT.put_line('SMA_EXCHANGES INSERT EXCHANGES PERU ' || SQL%ROWCOUNT);
    COMMIT;


    INSERT INTO SMA_EXCHANGES (id, sourcecurrency, targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
    SELECT   SMA_EXCHANGE_SEQ.NEXTVAL,H.sourcecurrency, H.targetcurrency, h.valor, M.missing_date, SYSDATE, SYSDATE
    FROM  (  SELECT  AC.SOURCECURRENCY  AS SOU_CURR,
            AC.TARGETCURRENCY           AS TAR_CURR,
            AD.d              AS missing_date
            FROM  (  SELECT   TRUNC(SYSDATE) - ROWNUM AS d
                    FROM   dual
                    CONNECT BY ROWNUM <= V_CONFIG_DAYS_EXCHANGE )   AD,
                  ( SELECT  DISTINCT SOURCECURRENCY,TARGETCURRENCY
                    FROM SMA_EXCHANGES)   AC
            MINUS
            SELECT  SOURCECURRENCY  AS SOU_CURR,
            TARGETCURRENCY          AS TAR_CURR,
            EXCHANGE_DATE        AS h_date
            FROM   SMA_EXCHANGES )          M,
        SMA_EXCHANGES            H
    WHERE  h.sourcecurrency = m.sou_curr
    AND     h.targetcurrency = m.tar_curr
    AND   H.EXCHANGE_DATE = (  SELECT   MIN(H2.EXCHANGE_DATE)
                                FROM   SMA_EXCHANGES  H2
                                WHERE  h2.sourcecurrency = H.sourcecurrency
                                AND     H2.targetcurrency = H.targetcurrency
                                AND   H2.EXCHANGE_DATE > M.missing_date );
    DBMS_OUTPUT.put_line('SMA_EXCHANGES INSERT EXCHANGES FERIADOS SABADOS Y DOMINGOS: ' || SQL%ROWCOUNT);
    COMMIT;

    --CUENTAS DE AHORRO
    merge into SMA_ACCOUNT sa
    using   (select U.USER_ID,u.UNIQUE_CODE,sra.TMSA_name,sra.TMSA_ACCOUNTID,sra.TMSA_ACCOUNTNUMBER,SRA.TMSA_TYPE,TMSA_cur
            from sma_user u, SMA_TMP_INCOME_USERSAVINGS sua, SMA_TMP_INCOME_SAVINGS sra
            where   sua.TMUA_userid = u.UNIQUE_CODE and
                    sua.TMUA_accountid = sra.TMSA_accountid) sra
    on (sa.CCI = sra.TMSA_ACCOUNTID)
    when not matched then
            insert (ACCOUNT_ID,ACCOUNT_NUMBER,CCI,ACCOUNT_ALIAS,UNIQUE_CODE,ACCOUNT_RATE_CODE,
            USER_ID,ACCOUNT_NAME,ACCOUNT_TYPE,ACCOUNT_CURR_CODE,
            CREATE_USER,CREATE_DATE, UPDATE_DATE)
            values (SMA_ACCOUNT_SEQ.nextval, TMSA_ACCOUNTNUMBER, TMSA_ACCOUNTID, NVL(NULL,'Bank'),sra.UNIQUE_CODE,NULL,
            sra.USER_ID,TMSA_name,TMSA_TYPE,TMSA_cur,
            V_USER,SYSDATE, SYSDATE);
    DBMS_OUTPUT.put_line('SMA_ACCOUNT INSERT: ' || SQL%ROWCOUNT);
    commit;

    /* ** Actualizacion de cuentas desabilitada por ahora
    merge into SMA_ACCOUNT sa
    using   (select sra.TMSA_ACCOUNTID,sra.TMSA_NAME, sra.TMSA_TYPE, sra.TMSA_ACCOUNTNUMBER,sra.TMSA_PROC_DATE,sra.TMSA_CUR
            from SMA_TMP_INCOME_SAVINGS sra) x
    on (x.TMSA_ACCOUNTID = sa.CCI)
    when matched then
        update set   sa.ACCOUNT_CURR_CODE = nvl(x.TMSA_CUR,ACCOUNT_CURR_CODE),sa.UPDATE_USER = V_USER,
                    sa.UPDATE_DATE = SYSDATE, sa.ACCOUNT_NAME = nvl(x.TMSA_NAME,ACCOUNT_NAME),
                    sa.ACCOUNT_TYPE = nvl(x.TMSA_TYPE,sa.ACCOUNT_TYPE), sa.ACCOUNT_NUMBER = nvl(x.TMSA_ACCOUNTNUMBER,ACCOUNT_NUMBER);
    DBMS_OUTPUT.put_line('SMA_ACCOUNT UPDATE: ' || SQL%ROWCOUNT);
    commit;
    */

    merge into SMA_OPERATIONS sao
    using (select /*+ full(str) PARALLEL(str,2) */
            u.UNIQUE_CODE, sa.ACCOUNT_ID, str.TMSX_OPERATIONDATE,str.TMSX_createdate,str.TMSX_name,str.TMSX_AMOUNT,str.TMSX_amtsign,str.TMSX_CURR,sa.ACCOUNT_CURR_CODE,str.TMSX_transid,str.TMSX_catid,
            TMSX_APPLICATION,TMSX_MOVEMENT_TYPE,TMSX_COD_MCC,TMSX_ESTABLISHMENT,TMSX_CURR_2,TMSX_ACCOUNT_NUMBER,c.CATEGORY_COMP,
            TMSX_NUM_OPER,TMSX_COD_PRODUCT, TMSX_UNIQUE_CODE, TMSX_OPERATION_MCC, TMSX_catruleid,ROUND(str.TMSX_AMOUNT*e.valor,2) amt_exchanged,
            TMSX_CUENTA_ORDBENEF, TMSX_CODUNICO_ORDBENEF, TMSX_NOMBRE_ORDBENEF, TMSX_CCI_ORDBENEF, TMSX_TRANSF_MISMO_OTRO_CLIENTE, TMSX_NOMBRE_TITULAR_CUENTA
        from SMA_TMP_INCOME_SAVINGS_TX str, SMA_ACCOUNT sa,SMA_CATEGORY c,SMA_USER u,SMA_EXCHANGES E
        where   u.USER_ID = sa.USER_ID and
                sa.CCI = str.TMSX_accountid and
                c.CATEGORY_ID = nvl(str.TMSX_catid,V_NO_CATEGORY) AND
                u.UNIQUE_CODE =  SUBSTR(TMSX_UNIQUE_CODE,-10) AND
                e.targetcurrency = 'PEN' AND
                str.TMSX_CURR = e.sourcecurrency AND
                str.TMSX_OPERATIONDATE = e.exchange_date) sop
    on (sao.ACCOUNT_ID = sop.ACCOUNT_ID AND sao.TRANS_ID = sop.TMSX_TRANSID AND sop.TMSX_OPERATIONDATE = sao.OPERATION_DATE)
    when not matched then
    insert (OPERATIONS_ID,CATEGORY_ID,ORIGINAL_CATEGORY_ID,ACCOUNT_ID,OPERATIONS_CURR_CODE,TRANS_ID,CREATE_USER,
                    PRODUCT_CODE,MOVEMENT_TYPE,APLICATION,ESTABLISHMENT,ID_MCC,OPERATION_MCC,
                    STATUS,
                    UNIQUE_CODE_ADDITIONAL,
                    AMOUNT,AMOUNT_EXCHANGED,OPERATION_TYPE,OPERATION_DATE,UNIQUE_CODE_PERSONAL,
                    CUENTA_ORDBENEF, CODUNICO_ORDBENEF, NOMBRE_ORDBENEF, CCI_ORDBENEF, TRANSF_MISMO_OTRO_CLIENTE, NOMBRE_TITULAR_CUENTA)
    values (SMA_OPERATIONS_SEQ.nextval,NVL(sop.TMSX_CATID,V_NO_CATEGORY),NVL(sop.TMSX_CATID,V_NO_CATEGORY), sop.ACCOUNT_ID,sop.TMSX_CURR,sop.TMSX_TRANSID,V_USER,
                    sop.TMSX_COD_PRODUCT,sop.TMSX_MOVEMENT_TYPE,sop.TMSX_APPLICATION,sop.TMSX_name,sop.TMSX_COD_MCC,sop.TMSX_OPERATION_MCC,
                    CASE WHEN sop.TMSX_OPERATION_MCC = '99' THEN 0 ELSE sop.CATEGORY_COMP END,SUBSTR(TMSX_NUM_OPER,-10),
                    sop.TMSX_AMOUNT,sop.amt_exchanged,CASE sop.TMSX_AMTSIGN when '-' then '0' else '1' end,sop.TMSX_OPERATIONDATE,sop.UNIQUE_CODE, 
                    sop.TMSX_CUENTA_ORDBENEF, sop.TMSX_CODUNICO_ORDBENEF, sop.TMSX_NOMBRE_ORDBENEF, sop.TMSX_CCI_ORDBENEF, sop.TMSX_TRANSF_MISMO_OTRO_CLIENTE, sop.TMSX_NOMBRE_TITULAR_CUENTA);
    DBMS_OUTPUT.put_line('SMA_OPERATIONS INSERT: ' || SQL%ROWCOUNT);
    commit;


    --********************************ACTUALIZACION DE ESTADISTICAS*****************************************
    DBMS_OUTPUT.put_line('[ACTUALIZACION DE ESTADISTICAS]');

    BEGIN

        t1 := dbms_utility.get_time;
        dbms_stats.gather_table_stats (  ownname    => V_ESQUEMA
                      ,  tabname    => 'SMA_ACCOUNT'
                      ,  cascade   => TRUE
                      ,  method_opt   => 'FOR ALL COLUMNS SIZE 1');
        DBMS_OUTPUT.put_line('Actualizacion de estadisticas SMA_ACCOUNT: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

        t1 := dbms_utility.get_time;
        OPEN C_MONTHS;
            LOOP
            fetch C_MONTHS into V_MONTH;
            exit when C_MONTHS%notfound;

            select trunc(add_months(V_MONTH,1),'mm')-1/24/60/60 into V_FECHA_FIN from dual;
            select 'P_'||to_char(V_FECHA_FIN,'YYYYMM') || '31' into PARTITION_NAME from dual;

            dbms_stats.gather_table_stats (  ownname    => V_ESQUEMA
                                        ,  tabname    => 'SMA_OPERATIONS'
                                        ,  partname   => PARTITION_NAME
                                        ,  degree     => 8
                                        ,  cascade   => TRUE
                                        ,  granularity => 'PARTITION'
                                        ,  method_opt   => 'FOR ALL COLUMNS SIZE 1');
            END LOOP;
        CLOSE C_MONTHS;
        DBMS_OUTPUT.put_line('Actualizacion de estadisticas SMA_OPERATIONS: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Error al actualizar estadisticas: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace);
    END;


    --Mostrando los mensajes en la variable de salida
    DBMS_OUTPUT.GET_LINES (v_Data, v_NumLines);
    FOR v_Counter IN v_data.FIRST .. v_data.LAST
    LOOP
    PO_MENSAJE := PO_MENSAJE || v_data (v_counter) || '|' ;
    END LOOP;

    PO_MENSAJE := PO_MENSAJE || 'RESPUESTA FINAL: OK';
    dbms_output.disable();

EXCEPTION WHEN OTHERS THEN

    --Mostrando los mensajes en la variable de salida
    DBMS_OUTPUT.GET_LINES (v_Data, v_NumLines);
    if v_Data.COUNT > 0 then
        FOR v_Counter IN v_data.FIRST .. v_data.LAST
        LOOP
          PO_MENSAJE := PO_MENSAJE || v_data (v_counter) || '|' ;
        END LOOP;
    END IF;

    PO_MENSAJE:= PO_MENSAJE || 'RESPUESTA ERROR: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace;
    dbms_output.disable();

END PRC_CHARGE_INCOME_SMART;

/
--------------------------------------------------------
--  DDL for Procedure PRC_CHARGE_SMART
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_CHARGE_SMART" (PI_FECHA in varchar2,PI_ESQUEMA IN VARCHAR2, PI_TABLESPACE IN VARCHAR2, PO_MENSAJE OUT VARCHAR2)AS

    V_USER VARCHAR2(20) := 'USR_ADM';
    V_ESQUEMA VARCHAR2(20) := PI_ESQUEMA;
    V_TABLESPACE VARCHAR2(20) := PI_TABLESPACE;
    V_CONFIG_DAYS_EXCHANGE  NUMBER := 180;

    V_DAY char(3) := TO_CHAR(sysdate, 'DY');
    V_FECHA_INICIO DATE;
    V_FECHA_FIN DATE;
    V_EXISTS NUMBER;
    PARTITION_NAME varchar2(10);
    V_EXISTS_PARTITION NUMBER := 0;
    V_MONTH date;
    V_NO_CATEGORY NUMBER := 24; --0 NO CATEGORY | 24 OTROS 

    cursor C_MONTHS is
            select distinct mes_tx
            from
                    (select trunc(TMSX_OPERATIONDATE,'MONTH') mes_tx
                     from SMA_TMP_SAVINGS_TX sat
                     group by  trunc(TMSX_OPERATIONDATE,'MONTH')
                    union
                     select  trunc(TMCX_OPERATIONDATE,'MONTH') mes_tx
                     from SMA_TMP_CREDITS_TX sct
                     group by  trunc(TMCX_OPERATIONDATE,'MONTH'))
            order by 1 desc;

    v_Data       DBMS_OUTPUT.CHARARR;
    v_NumLines   NUMBER := 5000;
    t1 pls_integer;

BEGIN

    dbms_output.enable();
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_USERS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_USERSAVINGS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_SAVINGS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_USERCREDITS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_CREDITS reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_SAVINGS_TX reuse storage';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE SMA_TMP_CREDITS_TX reuse storage';

    --********************************TABLAS TEMPORALES*****************************************
    DBMS_OUTPUT.put_line('[TABLAS TEMPORALES]');

    INSERT /*+ append */ INTO SMA_TMP_USERS (TMU_USERID,TMU_FECHA)
    select distinct id, trunc(sysdate)
    from (select distinct substr(SMCR_catfield11, length(SMCR_catfield11)-9, 10) id from SMA_COPY_CREDITS
    where SMCR_proc_date = trunc(sysdate)
    union
    select distinct substr(SMCS_catfield11, length(SMCS_catfield11)-9, 10) id from SMA_COPY_SAVINGS
    where SMCS_proc_date = trunc(sysdate)
    and SMCS_catfield11 is not null);
    DBMS_OUTPUT.put_line('SMA_TMP_USERS: ' || SQL%ROWCOUNT);
    COMMIT;

    INSERT /*+ append */ INTO SMA_TMP_USERSAVINGS (TMUA_USERID,TMUA_ACCOUNTID,TMUA_FECHA)
    select distinct
    substr(SMCS_catfield11, length(SMCS_catfield11)-9, 10),SMCS_accountid,trunc(sysdate)
    from SMA_COPY_SAVINGS
    where SMCS_proc_date =  trunc(sysdate)
    and SMCS_catfield11 is not null;
    DBMS_OUTPUT.put_line('SMA_TMP_USERSAVINGS: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_SAVINGS (TMSA_ACCOUNTID,TMSA_NAME,TMSA_TYPE,TMSA_CUR,TMSA_PROC_DATE,TMSA_ACCOUNTNUMBER)
    select distinct SMCS_accountid, pdd.CATALOG_description
    , 'savings'   , mdd.CATALOG_description  ,     trunc(sysdate), SMCS_catfield08
    from SMA_COPY_SAVINGS, SMA_CATALOG pdd, SMA_CATALOG mdd
    where SMCS_catfield10 = pdd.CATALOG_ID
    and SMCS_cur = mdd.CATALOG_ID
    and mdd.CATALOG_APPLICATION = 'SAV'
    and mdd.CATALOG_TYPE = 'Moneda'
    and pdd.CATALOG_TYPE = 'Producto'
    and SMCS_proc_date = trunc(sysdate);
    DBMS_OUTPUT.put_line('SMA_TMP_SAVINGS: ' || SQL%ROWCOUNT);
    COMMIT;

    INSERT /*+ append */ INTO SMA_TMP_USERCREDITS (TMUC_USERID,TMUC_ACCOUNTID,TMUC_FECHA,TMUC_CARDNAME)
    select distinct
    substr(SMCR_catfield11, length(SMCR_catfield11)-9, 10),SMCR_accountid, trunc(sysdate),max(SMCR_catfield08)
    from SMA_COPY_CREDITS
    where SMCR_proc_date = trunc(sysdate)
    group by substr(SMCR_catfield11, length(SMCR_catfield11)-9, 10),SMCR_accountid,0,0, trunc(sysdate);
    DBMS_OUTPUT.put_line('SMA_TMP_USERCREDITS: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_CREDITS (TMCR_accountid,TMCR_name,TMCR_type,TMCR_cur,TMCR_FECHA)
    select distinct SMCR_accountid,    CATALOG_DESCRIPTION,
    'credit'    , 'PEN'   , sysdate
    from SMA_COPY_CREDITS , SMA_CATALOG
    where SMCR_catfield10 = CATALOG_ID
    and SMCR_catfield01 = CATALOG_APPLICATION
    and CATALOG_APPLICATION = ANY ('NSAT', 'SAT')
    and CATALOG_TYPE = 'MarcaTipo'
    and SMCR_proc_date =  trunc(sysdate)
    group by  SMCR_accountid,  CATALOG_DESCRIPTION,'credit'    , 'PEN'   , 0   , sysdate ,   trunc(sysdate);
    DBMS_OUTPUT.put_line('SMA_TMP_CREDITS: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_SAVINGS_TX str
    (TMSX_transid, TMSX_accountid, TMSX_OPERATIONDATE, TMSX_createdate, TMSX_AMOUNT, TMSX_amtsign, TMSX_CURR,
      TMSX_name, TMSX_APPLICATION, TMSX_MOVEMENT_TYPE, TMSX_COD_MCC, TMSX_ESTABLISHMENT, TMSX_CURR_2, 
      TMSX_ACCOUNT_NUMBER, TMSX_NUM_OPER, TMSX_COD_PRODUCT, TMSX_UNIQUE_CODE, TMSX_OPERATION_MCC,
      TMSX_CUENTA_ORDBENEF, TMSX_CODUNICO_ORDBENEF, TMSX_NOMBRE_ORDBENEF, TMSX_CCI_ORDBENEF, TMSX_TRANSF_MISMO_OTRO_CLIENTE, TMSX_NOMBRE_TITULAR_CUENTA)
    select SMCS_transid AS TMSX_transid,
            SMCS_accountid AS TMSX_accountid,
            SMCS_posteddate AS TMSX_OPERATIONDATE,
            SMCS_createdate AS TMSX_createdate,
            SMCS_amt AS TMSX_AMOUNT,
            SMCS_amtsign AS TMSX_amtsign,
            CATALOG_DESCRIPTION AS TMSX_CURR,
            (rtrim(DECODE(SMCS_catfield02, '0360', nvl(SMCS_catfield04,SMCS_name), '5392', nvl(SMCS_catfield04,SMCS_name), SMCS_name))) AS TMSX_name,
            SMCS_catfield01 AS TMSX_APPLICATION,
            (case when SMCS_catfield12='99' then  SMCS_catfield02||'99' else SMCS_catfield02 end) AS TMSX_MOVEMENT_TYPE,
            (case substr(SMCS_CATFIELD03,0,4) when '0' then null else substr(SMCS_CATFIELD03,0,4) end) AS TMSX_COD_MCC,
            SMCS_catfield04 AS TMSX_ESTABLISHMENT,
            SMCS_catfield07 AS TMSX_CURR_2,
            SMCS_catfield08 AS TMSX_ACCOUNT_NUMBER,
            SMCS_catfield09 AS TMSX_NUM_OPER,
            SMCS_catfield10 AS TMSX_COD_PRODUCT,
            SMCS_catfield11 AS TMSX_UNIQUE_CODE,
            SMCS_catfield12 AS TMSX_OPERATION_MCC,
            SMCS_CUENTA_ORDBENEF AS TMSX_CUENTA_ORDBENEF, 
            SMCS_CODUNICO_ORDBENEF AS TMSX_CODUNICO_ORDBENEF, 
            SMCS_NOMBRE_ORDBENEF AS TMSX_NOMBRE_ORDBENEF, 
            SMCS_CCI_ORDBENEF AS TMSX_CCI_ORDBENEF, 
            SMCS_TRANSF_MISMO_OTRO_CLIENTE AS TMSX_TRANSF_MISMO_OTRO_CLIENTE, 
            SMCS_NOMBRE_TITULAR_CUENTA AS TMSX_NOMBRE_TITULAR_CUENTA
    from SMA_COPY_SAVINGS, SMA_CATALOG
    where SMCS_cur = CATALOG_ID
    and SMCS_catfield01 = 'SAV'
    and CATALOG_APPLICATION = 'SAV'
    and CATALOG_TYPE = 'Moneda'
    and substr(SMCS_catfield10,0,3) in ('205','214','206','223','201','203','224','202','222','225','701','702','703','704','205','214','206','223','201','203','224','202','222','225','701','702','704','215')
    and substr(SMCS_catfield02,0,4) in ('1100','2100','1391','6391','6362','1362','7362','1392','6392','5393','2391','3100','6101','2101','6100','2392','2362','3101','360','5392','5390','1161', '6394')
    and SMCS_proc_date = to_date(PI_FECHA,'yyyymmdd');
    DBMS_OUTPUT.put_line('SMA_TMP_SAVINGS_TX: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_CREDITS_TX str
    (TMCX_transid,
    TMCX_accountid,TMCX_OPERATIONDATE,TMCX_createdate,TMCX_AMOUNT,TMCX_amtsign,TMCX_CURR,
    TMCX_name, TMCX_APPLICATION,TMCX_MOVEMENT_TYPE,
    TMCX_COD_MCC,TMCX_ESTABLISHMENT,TMCX_CURR_2,TMCX_CREDIT_CARD,TMCX_NUM_OPER,TMCX_COD_PRODUCT,TMCX_UNIQUE_CODE_ADDI,TMCX_UNIQUE_CODE_PERS)
    select case  when  SUBSTR(SMCR_catfield09, -6)= '      ' then SMCR_transid else substr(SMCR_transid,15)||SMCR_catfield09 end ,
    SMCR_accountid,SMCR_posteddate,SMCR_createdate,SMCR_amt,SMCR_amtsign,CATALOG_description,
    rtrim(replace(replace(SMCR_name,chr(10),''),chr(13),'') ),SMCR_catfield01,substr(SMCR_catfield02,0,4),
    SMCR_catfield03,rtrim(replace(replace(SMCR_catfield04,chr(10),''),chr(13),'') ),SMCR_catfield07,SMCR_catfield08,SMCR_catfield09,SMCR_catfield10,SMCR_catfield11,SMCR_catfield12
    from SMA_COPY_CREDITS, SMA_CATALOG
    where SMCR_cur = CATALOG_ID
    and SMCR_catfield01 = 'NSAT'
    and CATALOG_APPLICATION = 'NSAT'
    and CATALOG_type = 'Moneda'
    and substr(SMCR_catfield02,0,4) in  ('0551', '0005','0007','0500','0501','0502','0503','0504','0505','0506','0507','0508','0509','0511','0512','0513','0514','0515','0516','0600','0601','0602','0700','0701','0702','0703','0704','0705','0707','0708','0709','0710','0711','0713')
    and substr(SMCR_transid,7,5) != '00000'
    and SMCR_proc_date = to_date(PI_FECHA,'yyyymmdd');
    DBMS_OUTPUT.put_line('SMA_TMP_CREDITS_TX NSAT: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_CREDITS_TX str
    (TMCX_transid,TMCX_accountid,
    TMCX_OPERATIONDATE,TMCX_createdate,TMCX_AMOUNT,TMCX_amtsign,TMCX_CURR,
    TMCX_name, TMCX_APPLICATION,TMCX_MOVEMENT_TYPE,
    TMCX_COD_MCC,TMCX_ESTABLISHMENT,TMCX_CURR_2,TMCX_CREDIT_CARD,TMCX_NUM_OPER,TMCX_COD_PRODUCT,TMCX_UNIQUE_CODE_ADDI,TMCX_UNIQUE_CODE_PERS)
    select case  when  SUBSTR(SMCR_catfield09, -6)= '      ' then SMCR_transid else substr(SMCR_transid,10)||SMCR_catfield09 end,
    SMCR_accountid,SMCR_posteddate,SMCR_createdate,SMCR_amt,SMCR_amtsign,CATALOG_description,
    rtrim(replace(replace(SMCR_name,chr(10),''),chr(13),'') ),SMCR_catfield01,SMCR_catfield02,
    SMCR_catfield03,rtrim(replace(replace(SMCR_catfield04,chr(10),''),chr(13),'') ),SMCR_catfield07,SMCR_catfield08,SMCR_catfield09,SMCR_catfield10,SMCR_catfield11,SMCR_catfield12
    from SMA_COPY_CREDITS, SMA_CATALOG
    where SMCR_cur = CATALOG_ID
    and SMCR_cur != '000'
    and SMCR_catfield01 = 'SAT'
    and CATALOG_APPLICATION = 'SAT'
    and CATALOG_TYPE = 'Moneda'
    and substr(SMCR_catfield02,0,2) in  ('05','07')
    and substr(SMCR_transid,7,5) != '00000'
    and SMCR_proc_date = to_date(PI_FECHA,'yyyymmdd');
    DBMS_OUTPUT.put_line('SMA_TMP_CREDITS_TX SAT: ' || SQL%ROWCOUNT);
    COMMIT;

    insert /*+ append */ into SMA_TMP_CREDITS_TX str
    (TMCX_transid,TMCX_accountid,
    TMCX_OPERATIONDATE,TMCX_createdate,TMCX_AMOUNT,TMCX_amtsign,TMCX_CURR,
    TMCX_name, TMCX_APPLICATION,TMCX_MOVEMENT_TYPE,
    TMCX_COD_MCC,TMCX_ESTABLISHMENT,TMCX_CURR_2,TMCX_CREDIT_CARD,TMCX_NUM_OPER,TMCX_COD_PRODUCT,TMCX_UNIQUE_CODE_ADDI,TMCX_UNIQUE_CODE_PERS)
    select case  when  SUBSTR(SMCR_catfield09, -6)= '      ' then SMCR_transid else substr(SMCR_transid,10)||SMCR_catfield09 end,
    SMCR_accountid,SMCR_posteddate,SMCR_createdate,SMCR_amt,SMCR_amtsign,CATALOG_description,
    rtrim(replace(replace(SMCR_name,chr(10),''),chr(13),'') ),SMCR_catfield01,SMCR_catfield02,
    SMCR_catfield03,rtrim(replace(replace(SMCR_catfield04,chr(10),''),chr(13),'') ),SMCR_catfield07,SMCR_catfield08,SMCR_catfield09,SMCR_catfield10,SMCR_catfield11,SMCR_catfield12
    from SMA_COPY_CREDITS, SMA_CATALOG
    where SMCR_catfield07 = CATALOG_ID
    and SMCR_cur = '000'
    and SMCR_catfield01 = 'SAT'
    and CATALOG_APPLICATION = 'SAT'
    and CATALOG_TYPE = 'Moneda'
    and substr(SMCR_catfield02,0,2) in  ('05','07')
    and substr(SMCR_transid,7,5) != '00000'
    and SMCR_proc_date = to_date(PI_FECHA,'yyyymmdd');
    DBMS_OUTPUT.put_line('SMA_TMP_CREDITS_TX SAT: ' || SQL%ROWCOUNT);
    COMMIT;

    update SMA_TMP_USERS sru set TMU_EXISTS = 1
    where exists(select 1 from SMA_USER u where u.UNIQUE_CODE = sru.TMU_USERID);
    commit;

    update SMA_TMP_USERSAVINGS srua set TMUA_existing = 1
    where (srua.TMUA_USERID, srua.TMUA_accountid) in
    (select sua.TMUA_userid, sua.TMUA_accountid
    from SMA_TMP_USERSAVINGS sua, SMA_ACCOUNT sa, SMA_USER u
    where sa.USER_ID = u.USER_ID and
    sua.TMUA_userid = u.UNIQUE_CODE and
    sua.TMUA_accountid = sa.CCI);
    commit;

    update SMA_TMP_USERCREDITS sruc set TMUC_existing = 1
    where (sruc.TMUC_userid, sruc.TMUC_accountid) in
    (select suc.TMUC_userid, suc.TMUC_accountid
    from SMA_TMP_USERCREDITS suc, SMA_ACCOUNT cc, SMA_USER u
    where   cc.USER_ID = u.USER_ID and
    suc.TMUC_userid = u.UNIQUE_CODE and
    suc.TMUC_accountid = cc.CCI);
    commit;


    --********************************CATEGORIZACION*****************************************
    DBMS_OUTPUT.put_line('[CATEGORIZACION]');

    t1 := dbms_utility.get_time;
    PRC_CATEGORIZACION_INT('SMA_TMP_SAVINGS_TX');
    DBMS_OUTPUT.put_line('Categorizacion de Savings en: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

    t1 := dbms_utility.get_time;
    PRC_CATEGORIZACION_INT('SMA_TMP_CREDITS_TX');
    DBMS_OUTPUT.put_line('Categorizacion de Credits en: ' || (dbms_utility.get_time - t1)/100 || ' seconds');


    --********************************TABLAS FINALES*****************************************
    DBMS_OUTPUT.put_line('[TABLAS FINALES]');

    BEGIN
        --Validando la particion para las operaciones a insertar
        OPEN C_MONTHS;
            LOOP
            fetch C_MONTHS into V_MONTH;
            exit when C_MONTHS%notfound;

                select trunc(add_months(V_MONTH,1),'mm')-1/24/60/60 into V_FECHA_FIN from dual;
                select 'P_'||to_char(V_FECHA_FIN,'YYYYMM')||'31' into PARTITION_NAME from dual;

                EXECUTE IMMEDIATE 'select count(1)  from user_ind_partitions t
                      where t.index_name = ''SMA_OPERATIONS_IDX_FECOPE'' and T.PARTITION_NAME =''' || PARTITION_NAME || '''' INTO V_EXISTS_PARTITION;

                if V_EXISTS_PARTITION = 0 THEN
                          DBMS_OUTPUT.put_line('Creando Particion en SMA_OPERATIONS: ' || PARTITION_NAME);
                          EXECUTE IMMEDIATE 'ALTER TABLE SMA_OPERATIONS ADD PARTITION ' || PARTITION_NAME || '  VALUES less than
                          (
                            TO_DATE(''' || TO_CHAR(V_FECHA_FIN+1,'YYYY-MM-DD') || ' 00:00:00'', ''SYYYY-MM-DD HH24:MI:SS'', ''NLS_CALENDAR=GREGORIAN'')
                          )
                         tablespace ' || V_TABLESPACE || '
                         pctfree 10
                         initrans 1
                         maxtrans 255
                         storage
                         (
                           initial 8M
                           next 1M
                           minextents 1
                           maxextents unlimited
                         )';
            end if;
            END LOOP;
        CLOSE C_MONTHS;

    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Error al evaluar particion en SMA_OPERATIONS: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace);
    END;


    MERGE into SMA_USER u
    using (select tmu_userid from SMA_TMP_USERS) su
    on (u.UNIQUE_CODE = su.tmu_userid)
    when not matched then
    INSERT (USER_ID,UNIQUE_CODE,CREATE_USER,CREATE_DATE)
    values (SMA_USER_SEQ.nextval,tmu_userid,V_USER,SYSDATE);
    DBMS_OUTPUT.put_line('SMA_USER INSERT: ' || SQL%ROWCOUNT);
    COMMIT;


    MERGE INTO SMA_EXCHANGES CEX
    USING (
        WITH Z AS
        ( SELECT DISTINCT edd.CATALOG_description AS SCE_SOURCECURRENCY,
        psce.SMCE_targetcurrency AS SCE_TARGETCURRENCY,
        psce.SMCE_exchange AS SCE_EXCHANGE,
        psce.SMCE_exchangedate AS SCE_EXCHANGEDATE
        FROM SMA_COPY_EXCHANGES psce,
        SMA_CATALOG edd
        WHERE psce.SMCE_proc_date    = to_date(PI_FECHA,'yyyymmdd')
        AND psce.SMCE_sourcecurrency = edd.CATALOG_ID
        AND edd.CATALOG_type             = 'Moneda'
        AND edd.CATALOG_APPLICATION              = 'CAM'
        UNION
        SELECT 'PEN' ,
        'PEN' ,
        1 ,
        TRUNC(sysdate)  FROM DUAL)
        SELECT  sce_sourcecurrency    AS src
        ,    sce_targetcurrency    AS tgt
        ,    sce_exchange      AS exc
        ,    sce_exchangedate    AS dat
        FROM  Z      SCE
        WHERE  SCE.sce_exchangedate = (SELECT  MAX(SCE2.sce_exchangedate)
                                  FROM  Z     SCE2
                                  WHERE  SCE2.sce_sourcecurrency = SCE.sce_sourcecurrency
                                         AND     SCE2.sce_targetcurrency = SCE.sce_targetcurrency )
        UNION
        SELECT  sce_targetcurrency    AS src
        ,    sce_sourcecurrency    AS tgt
        ,    1 / sce_exchange    AS exc
        ,    sce_exchangedate    AS dat
        FROM  Z      SCE
        WHERE  SCE.sce_exchangedate = (SELECT  MAX(SCE2.sce_exchangedate)
                                  FROM  Z SCE2
                                  WHERE  SCE2.sce_sourcecurrency = SCE.sce_sourcecurrency
                                         AND     SCE2.sce_targetcurrency = SCE.sce_targetcurrency)
          AND     NOT EXISTS (SELECT  1
                             FROM  Z  SCE3
                             WHERE  SCE3.sce_sourcecurrency = sce.sce_targetcurrency
                                    AND     SCE3.sce_targetcurrency = sce.sce_sourcecurrency)
        UNION

        SELECT  distinct SCE2.sce_targetcurrency    AS src
        ,    SCE1.SCE_sourcecurrency    AS tgt
        ,    1/(sce2.sce_exchange*SCE1.SCE_EXCHANGE)    AS exc
        ,    max(SCE2.sce_exchangedate)    AS dat
        FROM  Z      SCE1,Z SCE2
        WHERE  SCE1.SCE_exchangedate = SCE2.sce_exchangedate
          and SCE1.SCE_sourcecurrency != 'USD'
          and SCE2.sce_targetcurrency != 'USD'
          and SCE1.SCE_targetcurrency = 'USD'
        group by SCE2.sce_targetcurrency,SCE1.SCE_sourcecurrency,1/(sce2.sce_exchange*SCE1.SCE_EXCHANGE)
        UNION

        SELECT  distinct SCE1.SCE_sourcecurrency    AS src
        ,    SCE2.sce_targetcurrency    AS tgt
        ,    sce2.sce_exchange*SCE1.SCE_EXCHANGE    AS exc
        ,    max(SCE2.SCE_exchangedate)  AS dat
        FROM  Z      SCE1,Z SCE2
        WHERE  (SCE1.SCE_exchangedate) = trunc(SCE2.sce_exchangedate)
          and SCE1.SCE_sourcecurrency != 'USD'
          and SCE2.sce_targetcurrency != 'USD'
          and SCE1.SCE_targetcurrency = 'USD'
          and  NOT EXISTS (SELECT  1
                             FROM  Z  SCE3
                             WHERE  SCE3.sce_sourcecurrency = sce2.sce_targetcurrency
                                    AND     SCE3.sce_targetcurrency = sce2.sce_sourcecurrency)
          group by  SCE1.SCE_sourcecurrency,SCE2.sce_targetcurrency,sce2.sce_exchange*SCE1.SCE_EXCHANGE
                                    )     X
        ON ( X.src = CEX.sourcecurrency AND X.tgt = CEX.targetcurrency AND x.dat = CEX.EXCHANGE_DATE)
        WHEN MATCHED THEN
        UPDATE SET   CEX.VALOR = X.exc
        ,       CEX.UPDATE_DATE = SYSDATE
        WHERE   X.dat = CEX.Exchange_date
        WHEN NOT MATCHED THEN
        INSERT (  id            , sourcecurrency  , targetcurrency
            , VALOR          , exchange_date    , CREATE_date
            , UPDATE_date)
        VALUES (  SMA_EXCHANGE_SEQ.NEXTVAL  , X.src          , X.tgt
            , X.exc              , X.dat          , SYSDATE
            , SYSDATE);
    DBMS_OUTPUT.put_line('SMA_EXCHANGES MERGE: ' || SQL%ROWCOUNT);
    COMMIT;

    if V_DAY = 'FRI' then
        insert into SMA_EXCHANGES(id, sourcecurrency  , targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
        values (SMA_EXCHANGE_SEQ.NEXTVAL,'PEN','PEN',1,trunc(sysdate+1),SYSDATE,SYSDATE);
        insert into SMA_EXCHANGES(id, sourcecurrency  , targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
        values (SMA_EXCHANGE_SEQ.NEXTVAL,'PEN','PEN',1,trunc(sysdate+2),SYSDATE,SYSDATE);
        insert into SMA_EXCHANGES(id, sourcecurrency  , targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
        values (SMA_EXCHANGE_SEQ.NEXTVAL,'PEN','PEN',1,trunc(sysdate+3),SYSDATE,SYSDATE);
    end if;
    DBMS_OUTPUT.put_line('SMA_EXCHANGES INSERT EXCHANGES PERU ' || SQL%ROWCOUNT);
    COMMIT;


    INSERT INTO SMA_EXCHANGES (id, sourcecurrency, targetcurrency, VALOR, exchange_date, CREATE_date, UPDATE_date)
    SELECT   SMA_EXCHANGE_SEQ.NEXTVAL,H.sourcecurrency, H.targetcurrency, h.valor, M.missing_date, SYSDATE, SYSDATE
    FROM  (  SELECT  AC.SOURCECURRENCY  AS SOU_CURR,
            AC.TARGETCURRENCY           AS TAR_CURR,
            AD.d              AS missing_date
            FROM  (  SELECT   TRUNC(SYSDATE) - ROWNUM AS d
                    FROM   dual
                    CONNECT BY ROWNUM <= V_CONFIG_DAYS_EXCHANGE )   AD,
                  ( SELECT  DISTINCT SOURCECURRENCY,TARGETCURRENCY
                    FROM SMA_EXCHANGES)   AC
            MINUS
            SELECT  SOURCECURRENCY  AS SOU_CURR,
            TARGETCURRENCY          AS TAR_CURR,
            EXCHANGE_DATE        AS h_date
            FROM   SMA_EXCHANGES )          M,
        SMA_EXCHANGES            H
    WHERE  h.sourcecurrency = m.sou_curr
    AND     h.targetcurrency = m.tar_curr
    AND   H.EXCHANGE_DATE = (  SELECT   MIN(H2.EXCHANGE_DATE)
                                FROM   SMA_EXCHANGES  H2
                                WHERE  h2.sourcecurrency = H.sourcecurrency
                                AND     H2.targetcurrency = H.targetcurrency
                                AND   H2.EXCHANGE_DATE > M.missing_date );
    DBMS_OUTPUT.put_line('SMA_EXCHANGES INSERT EXCHANGES FERIADOS SABADOS Y DOMINGOS: ' || SQL%ROWCOUNT);
    COMMIT;

    --CUENTAS DE AHORRO
    merge into SMA_ACCOUNT sa
    using   (select U.USER_ID,u.UNIQUE_CODE,sra.TMSA_name,sra.TMSA_ACCOUNTID,sra.TMSA_ACCOUNTNUMBER,SRA.TMSA_TYPE,TMSA_cur
            from sma_user u, SMA_TMP_USERSAVINGS sua, SMA_TMP_SAVINGS sra
            where   sua.TMUA_userid = u.UNIQUE_CODE and
                    sua.TMUA_accountid = sra.TMSA_accountid) sra
    on (sa.CCI = sra.TMSA_ACCOUNTID)
    when not matched then
            insert (ACCOUNT_ID,ACCOUNT_NUMBER,CCI,ACCOUNT_ALIAS,UNIQUE_CODE,ACCOUNT_RATE_CODE,
            USER_ID,ACCOUNT_NAME,ACCOUNT_TYPE,ACCOUNT_CURR_CODE,
            CREATE_USER,CREATE_DATE)
            values (SMA_ACCOUNT_SEQ.nextval, TMSA_ACCOUNTNUMBER, TMSA_ACCOUNTID, NVL(NULL,'Bank'),sra.UNIQUE_CODE,NULL,
            sra.USER_ID,TMSA_name,TMSA_TYPE,TMSA_cur,
            V_USER,SYSDATE);
    DBMS_OUTPUT.put_line('SMA_ACCOUNT INSERT: ' || SQL%ROWCOUNT);
    commit;

    merge into SMA_ACCOUNT sa
    using   (select sra.TMSA_ACCOUNTID,sra.TMSA_NAME, sra.TMSA_TYPE, sra.TMSA_ACCOUNTNUMBER,sra.TMSA_PROC_DATE,sra.TMSA_CUR
            from SMA_TMP_SAVINGS sra) x
    on (x.TMSA_ACCOUNTID = sa.CCI)
    when matched then
        update set   sa.ACCOUNT_CURR_CODE = nvl(x.TMSA_CUR,ACCOUNT_CURR_CODE),sa.UPDATE_USER = V_USER,
                    sa.UPDATE_DATE = SYSDATE, sa.ACCOUNT_NAME = nvl(x.TMSA_NAME,ACCOUNT_NAME),
                    sa.ACCOUNT_TYPE = nvl(x.TMSA_TYPE,sa.ACCOUNT_TYPE), sa.ACCOUNT_NUMBER = nvl(x.TMSA_ACCOUNTNUMBER,ACCOUNT_NUMBER);
    DBMS_OUTPUT.put_line('SMA_ACCOUNT UPDATE: ' || SQL%ROWCOUNT);
    commit;

    merge into SMA_OPERATIONS sao
    using (select /*+ full(str) PARALLEL(str,2) */
            u.UNIQUE_CODE, sa.ACCOUNT_ID, str.TMSX_OPERATIONDATE,str.TMSX_createdate,str.TMSX_name,str.TMSX_AMOUNT,str.TMSX_amtsign,str.TMSX_CURR,sa.ACCOUNT_CURR_CODE,str.TMSX_transid,str.TMSX_catid,
            TMSX_APPLICATION,TMSX_MOVEMENT_TYPE,TMSX_COD_MCC,TMSX_ESTABLISHMENT,TMSX_CURR_2,TMSX_ACCOUNT_NUMBER,c.CATEGORY_COMP,
            TMSX_NUM_OPER,TMSX_COD_PRODUCT, TMSX_UNIQUE_CODE, TMSX_OPERATION_MCC, TMSX_catruleid,ROUND(str.TMSX_AMOUNT*e.valor,2) amt_exchanged,
            TMSX_CUENTA_ORDBENEF, TMSX_CODUNICO_ORDBENEF, TMSX_NOMBRE_ORDBENEF, TMSX_CCI_ORDBENEF, TMSX_TRANSF_MISMO_OTRO_CLIENTE, TMSX_NOMBRE_TITULAR_CUENTA
        from SMA_TMP_SAVINGS_TX str, SMA_ACCOUNT sa,SMA_CATEGORY c,SMA_USER u,SMA_EXCHANGES E
        where   u.USER_ID = sa.USER_ID and
                sa.CCI = str.TMSX_accountid and
                c.CATEGORY_ID = nvl(str.TMSX_catid,V_NO_CATEGORY) AND
                u.UNIQUE_CODE =  SUBSTR(TMSX_UNIQUE_CODE,-10) AND
                e.targetcurrency = 'PEN' AND
                str.TMSX_CURR = e.sourcecurrency AND
                str.TMSX_OPERATIONDATE = e.exchange_date) sop
    on (sao.ACCOUNT_ID = sop.ACCOUNT_ID AND sao.TRANS_ID = sop.TMSX_TRANSID AND sop.TMSX_OPERATIONDATE = sao.OPERATION_DATE)
    when not matched then
    insert (OPERATIONS_ID,CATEGORY_ID,ORIGINAL_CATEGORY_ID,ACCOUNT_ID,OPERATIONS_CURR_CODE,TRANS_ID,CREATE_USER,
                    PRODUCT_CODE,MOVEMENT_TYPE,APLICATION,ESTABLISHMENT,ID_MCC,OPERATION_MCC,
                    STATUS,
                    UNIQUE_CODE_ADDITIONAL,
                    AMOUNT,AMOUNT_EXCHANGED,OPERATION_TYPE,OPERATION_DATE,UNIQUE_CODE_PERSONAL,
                    CUENTA_ORDBENEF, CODUNICO_ORDBENEF, NOMBRE_ORDBENEF, CCI_ORDBENEF, TRANSF_MISMO_OTRO_CLIENTE, NOMBRE_TITULAR_CUENTA)
    values (SMA_OPERATIONS_SEQ.nextval,NVL(sop.TMSX_CATID,V_NO_CATEGORY),NVL(sop.TMSX_CATID,V_NO_CATEGORY), sop.ACCOUNT_ID,sop.TMSX_CURR,sop.TMSX_TRANSID,V_USER,
                    sop.TMSX_COD_PRODUCT,sop.TMSX_MOVEMENT_TYPE,sop.TMSX_APPLICATION,sop.TMSX_name,sop.TMSX_COD_MCC,sop.TMSX_OPERATION_MCC,
                    CASE WHEN sop.TMSX_OPERATION_MCC = '99' THEN 0 ELSE sop.CATEGORY_COMP END,SUBSTR(TMSX_NUM_OPER,-10),
                    sop.TMSX_AMOUNT,sop.amt_exchanged,CASE sop.TMSX_AMTSIGN when '-' then '0' else '1' end,sop.TMSX_OPERATIONDATE,sop.UNIQUE_CODE,
                    sop.TMSX_CUENTA_ORDBENEF, sop.TMSX_CODUNICO_ORDBENEF, sop.TMSX_NOMBRE_ORDBENEF, sop.TMSX_CCI_ORDBENEF, sop.TMSX_TRANSF_MISMO_OTRO_CLIENTE, sop.TMSX_NOMBRE_TITULAR_CUENTA);
    DBMS_OUTPUT.put_line('SMA_OPERATIONS INSERT: ' || SQL%ROWCOUNT);
    commit;


    --TARJETAS DE CREDITO

    merge into SMA_ACCOUNT cc
    using (select u.USER_ID, u.UNIQUE_CODE, suc.TMUC_cardname,src.TMCR_name,src.TMCR_accountid,src.TMCR_cur,src.TMCR_type, suc.TMUC_userid
                from SMA_USER u,SMA_TMP_USERCREDITS suc, SMA_TMP_CREDITS src
                where suc.TMUC_USERID = u.UNIQUE_CODE and
                      suc.TMUC_accountid = src.TMCR_accountid) x
    on (x.TMCR_accountid = cc.CCI and x.user_id = cc.USER_ID)
    when matched then
    update set   cc.ACCOUNT_CURR_CODE = nvl(x.TMCR_cur,cc.ACCOUNT_CURR_CODE),
                cc.ACCOUNT_NAME = nvl(x.TMCR_name,ACCOUNT_NAME),
                ACCOUNT_TYPE=nvl(x.TMCR_type,ACCOUNT_TYPE),
                ACCOUNT_NUMBER = SUBSTR(x.TMUC_cardname,1,4)||' '||SUBSTR(x.TMUC_cardname,5,2)||'  '||SUBSTR(x.TMUC_cardname,13,4),
                UPDATE_USER = V_USER,UPDATE_DATE = sysdate
    when not matched then
                  insert (ACCOUNT_ID,ACCOUNT_NUMBER,CCI,ACCOUNT_ALIAS,UNIQUE_CODE,ACCOUNT_RATE_CODE,
                  USER_ID,ACCOUNT_NAME,ACCOUNT_TYPE,ACCOUNT_CURR_CODE,
                  CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
                  values (SMA_ACCOUNT_SEQ.nextval, SUBSTR(x.TMUC_cardname,1,4)||' '||SUBSTR(x.TMUC_cardname,5,2)||'  '||SUBSTR(x.TMUC_cardname,13,4), TMCR_accountid, NULL ,x.UNIQUE_CODE,NULL,
                  x.USER_ID,TMCR_name,TMCR_type,TMCR_cur,
                  V_USER,SYSDATE,V_USER,SYSDATE);
    DBMS_OUTPUT.put_line('SMA_ACCOUNT CC MERGE: ' || SQL%ROWCOUNT);
    commit;

    merge into SMA_OPERATIONS cco
    using (select /*+ full(str) PARALLEL(str,2) */
            u.UNIQUE_CODE, cc.ACCOUNT_ID, str.TMCX_accountid, str.TMCX_OPERATIONDATE,str.TMCX_CREATEDATE,str.TMCX_NAME,str.TMCX_AMOUNT,str.TMCX_AMTSIGN,str.TMCX_CURR,cc.ACCOUNT_CURR_CODE,str.TMCX_TRANSID,str.TMCX_CATID,
            TMCX_APPLICATION,TMCX_MOVEMENT_TYPE,TMCX_COD_MCC,TMCX_ESTABLISHMENT,TMCX_CURR_2,TMCX_CREDIT_CARD,TMCX_NUM_OPER,TMCX_COD_PRODUCT,TMCX_UNIQUE_CODE_PERS,
            TMCX_UNIQUE_CODE_ADDI,TMCX_catruleid,ROUND(str.TMCX_AMOUNT*e.valor,2) amt_exchanged,c.CATEGORY_COMP
        from SMA_TMP_CREDITS_TX str, SMA_ACCOUNT cc, SMA_CATEGORY c,SMA_USER U,SMA_EXCHANGES E
        where   U.USER_ID = cc.USER_ID and
                cc.CCI = str.TMCX_accountid and
                c.CATEGORY_ID = nvl(str.TMCX_catid,V_NO_CATEGORY) AND
                TMCX_UNIQUE_CODE_PERS != TMCX_UNIQUE_CODE_ADDI AND
                e.targetcurrency = 'PEN' AND
                str.TMCX_CURR = e.sourcecurrency AND
                str.TMCX_OPERATIONDATE = e.exchange_date) x
    on (x.ACCOUNT_ID = cco.ACCOUNT_ID and cco.trans_id = x.TMCX_TRANSID AND x.TMCX_OPERATIONDATE = cco.OPERATION_DATE)
    when not matched then
    insert (OPERATIONS_ID,CATEGORY_ID,ORIGINAL_CATEGORY_ID,ACCOUNT_ID,OPERATIONS_CURR_CODE,TRANS_ID,CREATE_USER,
                    PRODUCT_CODE,MOVEMENT_TYPE,APLICATION,ESTABLISHMENT,ID_MCC,NUM_OPER,STATUS,
                    AMOUNT,AMOUNT_EXCHANGED,OPERATION_TYPE,OPERATION_DATE,UNIQUE_CODE_PERSONAL,UNIQUE_CODE_ADDITIONAL)
    values (SMA_OPERATIONS_SEQ.nextval,NVL(x.TMCX_CATID,V_NO_CATEGORY),NVL(x.TMCX_CATID,V_NO_CATEGORY), x.ACCOUNT_ID,x.TMCX_CURR,x.TMCX_TRANSID,V_USER,
                    x.TMCX_COD_PRODUCT,x.TMCX_MOVEMENT_TYPE,x.TMCX_APPLICATION,x.TMCX_NAME,x.TMCX_COD_MCC,x.TMCX_NUM_OPER,x.CATEGORY_COMP,
                    x.TMCX_AMOUNT,x.amt_exchanged,CASE x.TMCX_AMTSIGN when '-' then '0' else '1' end, x.TMCX_OPERATIONDATE,x.TMCX_UNIQUE_CODE_PERS,x.TMCX_UNIQUE_CODE_ADDI);
    DBMS_OUTPUT.put_line('SMA_OPERATIONS CC INSERT: ' || SQL%ROWCOUNT);
    commit;


    merge into SMA_OPERATIONS cco
    using (select /*+ full(str) PARALLEL(str,2) */
            u.UNIQUE_CODE, cc.ACCOUNT_ID, str.TMCX_accountid, str.TMCX_OPERATIONDATE,str.TMCX_CREATEDATE,str.TMCX_NAME,str.TMCX_AMOUNT,str.TMCX_AMTSIGN,str.TMCX_CURR,cc.ACCOUNT_CURR_CODE,str.TMCX_TRANSID,str.TMCX_CATID,
            TMCX_APPLICATION,TMCX_MOVEMENT_TYPE,TMCX_COD_MCC,TMCX_ESTABLISHMENT,TMCX_CURR_2,TMCX_CREDIT_CARD,TMCX_NUM_OPER,TMCX_COD_PRODUCT,TMCX_UNIQUE_CODE_PERS,
            TMCX_UNIQUE_CODE_ADDI,TMCX_catruleid,ROUND(str.TMCX_AMOUNT*e.valor,2) amt_exchanged,c.CATEGORY_COMP
        from SMA_TMP_CREDITS_TX str, SMA_ACCOUNT cc, SMA_CATEGORY c,SMA_USER U,SMA_EXCHANGES E
        where   U.USER_ID = cc.USER_ID and
                cc.CCI = str.TMCX_accountid and
                c.CATEGORY_ID = nvl(str.TMCX_catid,V_NO_CATEGORY) and
                TMCX_UNIQUE_CODE_PERS = TMCX_UNIQUE_CODE_ADDI and
                u.UNIQUE_CODE =  TMCX_UNIQUE_CODE_PERS AND
                e.targetcurrency = 'PEN' AND
                str.TMCX_CURR = e.sourcecurrency AND
                str.TMCX_OPERATIONDATE = e.exchange_date) x
    on (x.ACCOUNT_ID = cco.ACCOUNT_ID and cco.trans_id = x.TMCX_TRANSID AND x.TMCX_OPERATIONDATE = cco.OPERATION_DATE)
    when not matched then
    insert (OPERATIONS_ID,CATEGORY_ID,ORIGINAL_CATEGORY_ID,ACCOUNT_ID,OPERATIONS_CURR_CODE,TRANS_ID,CREATE_USER,
                    PRODUCT_CODE,MOVEMENT_TYPE,APLICATION,ESTABLISHMENT,ID_MCC,NUM_OPER,STATUS,
                    AMOUNT,AMOUNT_EXCHANGED,OPERATION_TYPE,OPERATION_DATE,UNIQUE_CODE_PERSONAL,UNIQUE_CODE_ADDITIONAL)
    values (SMA_OPERATIONS_SEQ.nextval,NVL(x.TMCX_CATID,V_NO_CATEGORY),NVL(x.TMCX_CATID,V_NO_CATEGORY), x.ACCOUNT_ID,x.TMCX_CURR,x.TMCX_TRANSID,V_USER,
                    x.TMCX_COD_PRODUCT,x.TMCX_MOVEMENT_TYPE,x.TMCX_APPLICATION,x.TMCX_NAME,x.TMCX_COD_MCC,x.TMCX_NUM_OPER,x.CATEGORY_COMP,
                    x.TMCX_AMOUNT,x.amt_exchanged,CASE x.TMCX_AMTSIGN when '-' then '0' else '1' end,x.TMCX_OPERATIONDATE,x.TMCX_UNIQUE_CODE_PERS,x.TMCX_UNIQUE_CODE_ADDI);
    DBMS_OUTPUT.put_line('SMA_OPERATIONS CC INSERT: ' || SQL%ROWCOUNT);
    commit;

    --********************************ACTUALIZACION DE ESTADISTICAS*****************************************
    DBMS_OUTPUT.put_line('[ACTUALIZACION DE ESTADISTICAS]');

    BEGIN

        t1 := dbms_utility.get_time;
        dbms_stats.gather_table_stats (  ownname    => V_ESQUEMA
                      ,  tabname    => 'SMA_ACCOUNT'
                      ,  cascade   => TRUE
                      ,  method_opt   => 'FOR ALL COLUMNS SIZE 1');
        DBMS_OUTPUT.put_line('Actualizacion de estadisticas SMA_ACCOUNT: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

        t1 := dbms_utility.get_time;
        OPEN C_MONTHS;
            LOOP
            fetch C_MONTHS into V_MONTH;
            exit when C_MONTHS%notfound;

            select trunc(add_months(V_MONTH,1),'mm')-1/24/60/60 into V_FECHA_FIN from dual;
            select 'P_'||to_char(V_FECHA_FIN,'YYYYMM') || '31' into PARTITION_NAME from dual;

            dbms_stats.gather_table_stats (  ownname    => V_ESQUEMA
                                        ,  tabname    => 'SMA_OPERATIONS'
                                        ,  partname   => PARTITION_NAME
                                        ,  degree     => 8
                                        ,  cascade   => TRUE
                                        ,  granularity => 'PARTITION'
                                        ,  method_opt   => 'FOR ALL COLUMNS SIZE 1');
            END LOOP;
        CLOSE C_MONTHS;
        DBMS_OUTPUT.put_line('Actualizacion de estadisticas SMA_OPERATIONS: ' || (dbms_utility.get_time - t1)/100 || ' seconds');

    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Error al actualizar estadisticas: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace);
    END;


    -- presupuesto
    PRC_BUDGET_SUGGESTED(V_USER, NULL);

    --Mostrando los mensajes en la variable de salida
    DBMS_OUTPUT.GET_LINES (v_Data, v_NumLines);
    FOR v_Counter IN v_data.FIRST .. v_data.LAST
    LOOP
    PO_MENSAJE := PO_MENSAJE || v_data (v_counter) || '|' ;
    END LOOP;

    PO_MENSAJE := PO_MENSAJE || 'RESPUESTA FINAL: OK';
    dbms_output.disable();

EXCEPTION WHEN OTHERS THEN

    --Mostrando los mensajes en la variable de salida
    DBMS_OUTPUT.GET_LINES (v_Data, v_NumLines);
    if v_Data.COUNT > 0 then
        FOR v_Counter IN v_data.FIRST .. v_data.LAST
        LOOP
          PO_MENSAJE := PO_MENSAJE || v_data (v_counter) || '|' ;
        END LOOP;
    END IF;

    PO_MENSAJE:= PO_MENSAJE || 'RESPUESTA ERROR: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace;
    dbms_output.disable();

END PRC_CHARGE_SMART;

/
--------------------------------------------------------
--  DDL for Procedure PRC_GET_COUNT_AMOUNT_OPERATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_GET_COUNT_AMOUNT_OPERATION" 
   (PI_FECHA_INICIO IN VARCHAR2,
    PI_FECHA_FIN    IN VARCHAR2,
    PI_UNIQUE_CODE  IN VARCHAR2,
	PI_OPERATION_TYPE IN NUMBER,
	PI_CATEGORY_PARENT_ID IN NUMBER,
    PO_TOTAL_RECORDS OUT NUMBER,
    PO_TOTAL_AMOUNT_EXCHANGE OUT NUMBER,
	PO_CODIGO_RESPUESTA OUT NUMBER,
	PO_MENSAJE_RESPUESTA OUT VARCHAR2)
AS
  
BEGIN

  PO_TOTAL_RECORDS := 0;
  PO_TOTAL_AMOUNT_EXCHANGE := 0;

  SELECT SUM(AMOUNT_EXCHANGED) INTO PO_TOTAL_AMOUNT_EXCHANGE FROM SMA_OPERATIONS OO 
                INNER JOIN SMA_ACCOUNT AA ON AA.ACCOUNT_ID = OO.ACCOUNT_ID 
                INNER JOIN SMA_CATEGORY CC ON CC.CATEGORY_ID = OO.CATEGORY_ID 
                WHERE 
                      AA.STATUS = 1 AND 
                      AA.UNIQUE_CODE = PI_UNIQUE_CODE AND 
                      CC.CATEGORY_PARENTID = PI_CATEGORY_PARENT_ID AND 
					  OO.OPERATION_TYPE = PI_OPERATION_TYPE  
                     AND ( OPERATION_DATE >= TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY') AND OPERATION_DATE <= TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY') );

SELECT count(*) INTO PO_TOTAL_RECORDS FROM SMA_OPERATIONS OO 
                INNER JOIN SMA_ACCOUNT AA ON AA.ACCOUNT_ID = OO.ACCOUNT_ID 
                INNER JOIN SMA_CATEGORY CC ON CC.CATEGORY_ID = OO.CATEGORY_ID 
                WHERE 
                      AA.STATUS = 1 AND 
                      AA.UNIQUE_CODE = PI_UNIQUE_CODE AND 
                      CC.CATEGORY_PARENTID = PI_CATEGORY_PARENT_ID AND 
					  OO.OPERATION_TYPE = PI_OPERATION_TYPE  
                     AND ( OPERATION_DATE >= TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY') AND OPERATION_DATE <= TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY') );

    PO_CODIGO_RESPUESTA := 0;
    PO_MENSAJE_RESPUESTA := 'OK';

EXCEPTION WHEN OTHERS THEN
    PO_CODIGO_RESPUESTA := -1;
    PO_MENSAJE_RESPUESTA := 'RESPUESTA ERROR: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_GET_HOME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_GET_HOME" (
    pi_fecha_inicio        IN VARCHAR2,
    pi_fecha_fin           IN VARCHAR2,
    pi_unique_code         IN VARCHAR2,
    pi_flag                IN VARCHAR2,
    po_cur_categories      OUT SYS_REFCURSOR,
    po_cur_three_months    OUT SYS_REFCURSOR,
    po_time                OUT NUMBER,
    po_codigo_respuesta    OUT VARCHAR2,
    po_mensaje_respuesta   OUT VARCHAR2
)
AS
    t1 pls_integer;

BEGIN
    t1 := dbms_utility.get_time;

        OPEN PO_CUR_CATEGORIES FOR
           SELECT NVL(B.CAT_PARENTID,T.CATEGORYID) CATEGORYID,
            NVL(B.CATEGORY_NAME,T.CATEGORYNAME) CATEGORYNAME, 
            NVL(B.CATEGORY_COLOR,T.CATEGORYCOLOR) CATEGORYCOLOR,
            T.MONTHOPERATION, NVL(T.AMOUNT,0) AMOUNT,NVL(T.COUNTOPERATION,0) COUNTOPERATION,
            B.VALUE_MANUAL AMOUNTMANUAL,
            (CASE WHEN T.CATEGORYID IS NOT NULL THEN 'G' ELSE 'P' END) TYPEEXPENSE FROM 
            (SELECT /*+RULE*/ C1.CATEGORY_ID CATEGORYID,C1.CATEGORY_NAME CATEGORYNAME,C1.CATEGORY_COLOR CATEGORYCOLOR,TRUNC(OPERATION_DATE,'mm') MONTHOPERATION,
            SUM(DECODE(OP.STATUS,0,0,OP.AMOUNT_EXCHANGED)) AMOUNT,COUNT(OP.OPERATIONS_ID) COUNTOPERATION
            FROM SMA_OPERATIONS OP
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = OP.CATEGORY_ID
            INNER JOIN SMA_CATEGORY C1 ON C1.CATEGORY_ID = C.CATEGORY_PARENTID
            INNER JOIN SMA_ACCOUNT A ON A.ACCOUNT_ID = OP.ACCOUNT_ID AND A.STATUS = 1
            WHERE OP.OPERATION_DATE BETWEEN TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY') AND TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY')
            AND A.UNIQUE_CODE = PI_UNIQUE_CODE 
            AND (OP.UNIQUE_CODE_PERSONAL = PI_UNIQUE_CODE OR OP.UNIQUE_CODE_ADDITIONAL = PI_UNIQUE_CODE)
            AND OP.OPERATION_TYPE = '0'
            GROUP BY C1.CATEGORY_ID,C1.CATEGORY_NAME,C1.CATEGORY_COLOR,TRUNC(OPERATION_DATE,'mm') ) T
            FULL OUTER JOIN 
            (SELECT B.CAT_PARENTID,C.CATEGORY_NAME,C.CATEGORY_COLOR,B.VALUE_MANUAL 
            FROM SMA_BUDGETS B 
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = B.CAT_PARENTID
            WHERE B.UNIQUE_CODE = PI_UNIQUE_CODE AND B.STATUS = 'M' AND B.VALUE_MANUAL > 0
            AND (EXTRACT(MONTH FROM SYSDATE) = EXTRACT(MONTH FROM TO_DATE(PI_FECHA_INICIO , 'DD/MM/YYYY')))) B 
            ON B.CAT_PARENTID = T.CATEGORYID 
            ORDER BY T.MONTHOPERATION DESC NULLS LAST, 
                    (CASE WHEN NVL(B.VALUE_MANUAL,0) > 0 THEN T.AMOUNT END) DESC NULLS LAST,
                  (CASE WHEN NVL(B.VALUE_MANUAL,0) = 0 THEN T.AMOUNT END) DESC NULLS LAST,
                  NVL(B.VALUE_MANUAL,0) DESC NULLS LAST;

    IF (PI_FLAG = '1') THEN
        OPEN PO_CUR_THREE_MONTHS FOR
            SELECT /*+RULE*/ C1.CATEGORY_ID CATEGORYID,C1.CATEGORY_NAME CATEGORYNAME,C1.CATEGORY_COLOR CATEGORYCOLOR,TRUNC(OPERATION_DATE,'mm') MONTHOPERATION,
            SUM(DECODE(OP.STATUS,0,0,OP.AMOUNT_EXCHANGED)) AMOUNT,COUNT(OP.OPERATIONS_ID) COUNTOPERATION
            FROM SMA_OPERATIONS OP
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = OP.CATEGORY_ID
            INNER JOIN SMA_CATEGORY C1 ON C1.CATEGORY_ID = C.CATEGORY_PARENTID
            INNER JOIN SMA_ACCOUNT A ON A.ACCOUNT_ID = OP.ACCOUNT_ID AND A.STATUS = 1
            LEFT JOIN SMA_BUDGETS B ON B.UNIQUE_CODE = A.UNIQUE_CODE AND B.CAT_PARENTID = C1.CATEGORY_ID
            WHERE OP.OPERATION_DATE BETWEEN ADD_MONTHS(TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY'),-3) AND ADD_MONTHS(TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY'),-1)
            AND A.UNIQUE_CODE = PI_UNIQUE_CODE 
            AND (OP.UNIQUE_CODE_PERSONAL = PI_UNIQUE_CODE OR OP.UNIQUE_CODE_ADDITIONAL = PI_UNIQUE_CODE)
            AND OP.OPERATION_TYPE = '0'
            GROUP BY C1.CATEGORY_ID,C1.CATEGORY_NAME,C1.CATEGORY_COLOR,TRUNC(OPERATION_DATE,'mm');
    END IF;

    PO_TIME := (dbms_utility.get_time - t1) / 100;
    DBMS_OUTPUT.put_line('PRC_GET_HOME: ' || PO_TIME || ' seconds');
    PO_CODIGO_RESPUESTA := '0';
    PO_MENSAJE_RESPUESTA := 'OK';

EXCEPTION WHEN OTHERS THEN

    PO_CODIGO_RESPUESTA := '-1';
    PO_MENSAJE_RESPUESTA := 'RESPUESTA ERROR: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_GET_HOME_BUDGET
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "USR_ADM"."PRC_GET_HOME_BUDGET" (
    pi_fecha_inicio        IN VARCHAR2,
    pi_fecha_fin           IN VARCHAR2,
    pi_unique_code         IN VARCHAR2,
    pi_flag                IN VARCHAR2,
    po_cur_categories      OUT SYS_REFCURSOR,
    po_cur_three_months    OUT SYS_REFCURSOR,
    po_time                OUT NUMBER,
    po_codigo_respuesta    OUT VARCHAR2,
    po_mensaje_respuesta   OUT VARCHAR2
)
AS
    t1 pls_integer;

BEGIN
    t1 := dbms_utility.get_time;

        OPEN PO_CUR_CATEGORIES FOR
           SELECT NVL(B.CAT_PARENTID,T.CATEGORYID) CATEGORYID,
            NVL(B.CATEGORY_NAME,T.CATEGORYNAME) CATEGORYNAME, 
            NVL(B.CATEGORY_COLOR,T.CATEGORYCOLOR) CATEGORYCOLOR,
            T.MONTHOPERATION, NVL(T.AMOUNT,0) AMOUNT,NVL(T.COUNTOPERATION,0) COUNTOPERATION,
            B.VALUE_MANUAL AMOUNTMANUAL,
            (CASE WHEN T.CATEGORYID IS NOT NULL THEN 'G' ELSE 'P' END) TYPEEXPENSE FROM 
            (SELECT /*+RULE*/ C1.CATEGORY_ID CATEGORYID,C1.CATEGORY_NAME CATEGORYNAME,C1.CATEGORY_COLOR CATEGORYCOLOR,TRUNC(OPERATION_DATE,'mm') MONTHOPERATION,
            SUM(DECODE(OP.STATUS,0,0,OP.AMOUNT_EXCHANGED)) AMOUNT,COUNT(OP.OPERATIONS_ID) COUNTOPERATION
            FROM SMA_OPERATIONS OP
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = OP.CATEGORY_ID
            INNER JOIN SMA_CATEGORY C1 ON C1.CATEGORY_ID = C.CATEGORY_PARENTID
            INNER JOIN SMA_ACCOUNT A ON A.ACCOUNT_ID = OP.ACCOUNT_ID AND A.STATUS = 1
            WHERE OP.OPERATION_DATE BETWEEN TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY') AND TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY')
            AND A.UNIQUE_CODE = PI_UNIQUE_CODE 
            AND (OP.UNIQUE_CODE_PERSONAL = PI_UNIQUE_CODE OR OP.UNIQUE_CODE_ADDITIONAL = PI_UNIQUE_CODE)
            AND OP.OPERATION_TYPE = '0'
            GROUP BY C1.CATEGORY_ID,C1.CATEGORY_NAME,C1.CATEGORY_COLOR,TRUNC(OPERATION_DATE,'mm') ) T
            FULL OUTER JOIN 
            (SELECT B.CAT_PARENTID,C.CATEGORY_NAME,C.CATEGORY_COLOR,B.VALUE_MANUAL 
            FROM SMA_BUDGETS B 
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = B.CAT_PARENTID
            WHERE B.UNIQUE_CODE = PI_UNIQUE_CODE AND B.STATUS = 'M' AND B.VALUE_MANUAL > 0) B 
            ON B.CAT_PARENTID = T.CATEGORYID 
            ORDER BY T.MONTHOPERATION DESC NULLS LAST, 
                    (CASE WHEN NVL(B.VALUE_MANUAL,0) > 0 THEN T.AMOUNT END) DESC NULLS LAST,
                  (CASE WHEN NVL(B.VALUE_MANUAL,0) = 0 THEN T.AMOUNT END) DESC NULLS LAST,
                  NVL(B.VALUE_MANUAL,0) DESC NULLS LAST;

    IF (PI_FLAG = '1') THEN
        OPEN PO_CUR_THREE_MONTHS FOR
            SELECT /*+RULE*/ C1.CATEGORY_ID CATEGORYID,C1.CATEGORY_NAME CATEGORYNAME,C1.CATEGORY_COLOR CATEGORYCOLOR,TRUNC(OPERATION_DATE,'mm') MONTHOPERATION,
            SUM(DECODE(OP.STATUS,0,0,OP.AMOUNT_EXCHANGED)) AMOUNT,COUNT(OP.OPERATIONS_ID) COUNTOPERATION
            FROM SMA_OPERATIONS OP
            INNER JOIN SMA_CATEGORY C ON C.CATEGORY_ID = OP.CATEGORY_ID
            INNER JOIN SMA_CATEGORY C1 ON C1.CATEGORY_ID = C.CATEGORY_PARENTID
            INNER JOIN SMA_ACCOUNT A ON A.ACCOUNT_ID = OP.ACCOUNT_ID AND A.STATUS = 1
            LEFT JOIN SMA_BUDGETS B ON B.UNIQUE_CODE = A.UNIQUE_CODE AND B.CAT_PARENTID = C1.CATEGORY_ID
            WHERE OP.OPERATION_DATE BETWEEN ADD_MONTHS(TO_DATE(PI_FECHA_INICIO,'DD/MM/YYYY'),-3) AND ADD_MONTHS(TO_DATE(PI_FECHA_FIN,'DD/MM/YYYY'),-1)
            AND A.UNIQUE_CODE = PI_UNIQUE_CODE 
            AND (OP.UNIQUE_CODE_PERSONAL = PI_UNIQUE_CODE OR OP.UNIQUE_CODE_ADDITIONAL = PI_UNIQUE_CODE)
            AND OP.OPERATION_TYPE = '0'
            GROUP BY C1.CATEGORY_ID,C1.CATEGORY_NAME,C1.CATEGORY_COLOR,TRUNC(OPERATION_DATE,'mm');
    END IF;

    PO_TIME := (dbms_utility.get_time - t1) / 100;
    DBMS_OUTPUT.put_line('PRC_GET_HOME_BUDGET: ' || PO_TIME || ' seconds');
    PO_CODIGO_RESPUESTA := '0';
    PO_MENSAJE_RESPUESTA := 'OK';

EXCEPTION WHEN OTHERS THEN

    PO_CODIGO_RESPUESTA := '-1';
    PO_MENSAJE_RESPUESTA := 'RESPUESTA ERROR: ' || SQLERRM || '|' || DBMS_UTILITY.format_error_backtrace;

END;

/
--------------------------------------------------------
--  Constraints for Table SMA_TMP_INCOME_SAVINGS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS" MODIFY ("TMSA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS" MODIFY ("TMSA_ACCOUNTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TEMP_STATS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("CANTITY" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" ADD CONSTRAINT "SMA_TEMP_STATS_PK" PRIMARY KEY ("UNIQUE_CODE", "CAT_ID", "ACCOUNT_ID", "ACCOUNT_TYPE", "OPERATION_TYPE", "MONTH_TS", "CURR_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("OPERATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("ACCOUNT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_STATS" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TMP_SAVINGS_TX
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" MODIFY ("TMSX_TRANSID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" MODIFY ("TMSX_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" MODIFY ("TMSX_OPERATIONDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" MODIFY ("TMSX_AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_SAVINGS_TX" MODIFY ("TMSX_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_CATEGORY
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_CATEGORY" ADD CONSTRAINT "SMA_CATEGORY_PK" PRIMARY KEY ("CATEGORY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_LEVEL" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_NAME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_COMP" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY" MODIFY ("CATEGORY_UPDATE_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TMP_CREDITS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS" MODIFY ("TMCR_ACCOUNTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_H_OPERATIONS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" ADD CONSTRAINT "SMA_H_OPERATIONS_PK" PRIMARY KEY ("OPERATIONS_ID", "ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("OPERATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("APLICATION" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("UNIQUE_CODE_PERSONAL" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_OPERATIONS" MODIFY ("OPERATIONS_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COPY_MOVCTAS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COPY_MOVCTAS" MODIFY ("SMCM_PROC_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_MOVCTAS" MODIFY ("SMCM_EVENTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COPY_MAESTRO
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COPY_MAESTRO" MODIFY ("SMCM_PROC_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_ONBOARD_SMART
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_ONBOARD_SMART" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ONBOARD_SMART" MODIFY ("ONBOARD_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_CATEGORY_CHANGES
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" ADD CONSTRAINT "SMA_CATEGORY_CHANGES_PK" PRIMARY KEY ("CATEGORY_CHANGES_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" MODIFY ("CHANGES" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_ONBOARD_PP
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_ONBOARD_PP" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ONBOARD_PP" MODIFY ("ONBOARD_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TOTALIZED_STATS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("CAT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("ACCOUNT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("AMOUNT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("MONTH_TS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("CURR_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("CANTITY" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TOTALIZED_STATS" ADD CONSTRAINT "SMA_TS_LOCAL_PK" PRIMARY KEY ("UNIQUE_CODE", "CAT_ID", "ACCOUNT_ID", "ACCOUNT_TYPE", "AMOUNT_TYPE", "MONTH_TS", "CURR_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P_201508" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201509" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201510" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201511" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201512" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201601" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201602" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201603" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201604" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201605" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201606" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201607" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201608" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201609" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201610" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201611" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201612" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201701" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201702" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201703" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201704" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201705" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201706" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201707" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201708" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201709" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201710" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201711" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201712" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201801" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201802" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201803" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201804" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201805" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201806" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201807" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201808" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201809" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201810" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201811" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201812" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201901" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201902" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201903" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201904" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
   , 
 PARTITION "P_201905" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201906" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201907" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201908" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201909" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201910" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201911" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_201912" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202001" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202002" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202003" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   , 
 PARTITION "P_202004" 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   )  ENABLE;
--------------------------------------------------------
--  Constraints for Table SMA_TMP_CREDITS_TX
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" MODIFY ("TMCX_TRANSID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" MODIFY ("TMCX_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" MODIFY ("TMCX_OPERATIONDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" MODIFY ("TMCX_AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_CREDITS_TX" MODIFY ("TMCX_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COPY_SAVINGS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_TRANSID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_POSTEDDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_AMT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_NAME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_SAVINGS" MODIFY ("SMCS_EXCLUDEPATTERN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_BUDGETS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_BUDGETS" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" MODIFY ("CAT_PARENTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" ADD CONSTRAINT "SMA_BUDGETS_PK" PRIMARY KEY ("BUDGET_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_BUDGETS" ADD CONSTRAINT "SMA_BUDGETS_UNICAT" UNIQUE ("UNIQUE_CODE", "CAT_PARENTID") DISABLE;
--------------------------------------------------------
--  Constraints for Table SMA_USER
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_USER" ADD CONSTRAINT "SMA_USER_UNIQUE_CODE" UNIQUE ("UNIQUE_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_USER" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_USER" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_USER" ADD CONSTRAINT "SMA_USER_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_USER" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_SEGMENTS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_SEGMENTS" MODIFY ("SEGMENT_NAME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_SEGMENTS" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_SEGMENTS" ADD CONSTRAINT "SMA_SEGMENTS_PK" PRIMARY KEY ("UNIQUE_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
--------------------------------------------------------
--  Constraints for Table SMA_BANK
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_BANK" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BANK" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_BANK" ADD CONSTRAINT "SMA_BANK_PK" PRIMARY KEY ("BANK_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
    ENABLE;
--------------------------------------------------------
--  Constraints for Table SMA_OPERATIONS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("OPERATIONS_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("UNIQUE_CODE_PERSONAL" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("APLICATION" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" MODIFY ("OPERATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" ADD CONSTRAINT "SMA_OPERATIONS_PK" PRIMARY KEY ("OPERATIONS_ID", "ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
--------------------------------------------------------
--  Constraints for Table SMA_TMP_USERCREDITS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_USERCREDITS" MODIFY ("TMUC_USERID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_USERCREDITS" MODIFY ("TMUC_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_USERCREDITS" MODIFY ("TMUC_EXISTING" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_CONFIG
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_CONFIG" ADD PRIMARY KEY ("KEY_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_CONFIG" MODIFY ("ESTADO" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_CONFIG" MODIFY ("C_VALUE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_OPERATIONS_R
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("OPERATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("APLICATION" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("UNIQUE_CODE_PERSONAL" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS_R" MODIFY ("OPERATIONS_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TEMP_OPERATIONS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" ADD CONSTRAINT "SMA_TEMP_OPERATIONS_PK" PRIMARY KEY ("OPERATIONS_ID", "ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("OPERATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("APLICATION" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("UNIQUE_CODE_PERSONAL" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TEMP_OPERATIONS" MODIFY ("OPERATIONS_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_H_BUDGETS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" ADD CONSTRAINT "SMA_H_BUDGETS_UCM" UNIQUE ("UNIQUE_CODE", "CAT_PARENTID", "MONTH_BG")
  USING INDEX (CREATE INDEX "USR_ADM"."SMA_H_BUDGETS_IDX_UCM" ON "USR_ADM"."SMA_H_BUDGETS" ("UNIQUE_CODE", "CAT_PARENTID", "MONTH_BG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   )  ENABLE;
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" ADD CONSTRAINT "SMA_H_BUDGETS_PK" PRIMARY KEY ("H_BUDGETS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("MONTH_BG" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("CAT_PARENTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_H_BUDGETS" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COPY_CREDITS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COPY_CREDITS" MODIFY ("SMCR_TRANSID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_CREDITS" MODIFY ("SMCR_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_CREDITS" MODIFY ("SMCR_POSTEDDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_CREDITS" MODIFY ("SMCR_AMT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_CREDITS" MODIFY ("SMCR_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_TMP_INCOME_SAVINGS_TX
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" MODIFY ("TMSX_NAME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" MODIFY ("TMSX_AMOUNT" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" MODIFY ("TMSX_OPERATIONDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" MODIFY ("TMSX_ACCOUNTID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_TMP_INCOME_SAVINGS_TX" MODIFY ("TMSX_TRANSID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COMMERCE
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COMMERCE" MODIFY ("COMMERCE_NAME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COMMERCE" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COMMERCE" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COMMERCE" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COMMERCE" ADD CONSTRAINT "SMA_COMMERCE_PK" PRIMARY KEY ("COMMERCE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
    ENABLE;
--------------------------------------------------------
--  Constraints for Table SMA_ACCOUNT
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("STATUS_INCOME" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("ACCOUNT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("ACCOUNT_CURR_CODE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("CREATE_USER" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" ADD CONSTRAINT "SMA_ACCOUNT_PK" PRIMARY KEY ("ACCOUNT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
    ENABLE;
  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" MODIFY ("UNIQUE_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMA_COPY_EXCHANGES
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_COPY_EXCHANGES" MODIFY ("SMCE_SOURCECURRENCY" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_EXCHANGES" MODIFY ("SMCE_TARGETCURRENCY" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_EXCHANGES" MODIFY ("SMCE_EXCHANGE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_EXCHANGES" MODIFY ("SMCE_EXCHANGEDATE" NOT NULL ENABLE);
  ALTER TABLE "USR_ADM"."SMA_COPY_EXCHANGES" MODIFY ("SMCE_PROC_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table SMA_ACCOUNT
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_ACCOUNT" ADD CONSTRAINT "SMA_ACCOUNT_SMA_USER_FK" FOREIGN KEY ("USER_ID")
	  REFERENCES "USR_ADM"."SMA_USER" ("USER_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table SMA_BUDGETS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_BUDGETS" ADD CONSTRAINT "SMA_CATEGORY_FK" FOREIGN KEY ("CAT_PARENTID")
	  REFERENCES "USR_ADM"."SMA_CATEGORY" ("CATEGORY_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table SMA_CATEGORY_CHANGES
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" ADD CONSTRAINT "SMA_CATEGORY_CHANGES_DEST_FK" FOREIGN KEY ("DEST_CATEGORY_ID")
	  REFERENCES "USR_ADM"."SMA_CATEGORY" ("CATEGORY_ID") DISABLE;
  ALTER TABLE "USR_ADM"."SMA_CATEGORY_CHANGES" ADD CONSTRAINT "SMA_CATEGORY_CHANGES_SOURCE_FK" FOREIGN KEY ("SOURCE_CATEGORY_ID")
	  REFERENCES "USR_ADM"."SMA_CATEGORY" ("CATEGORY_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table SMA_OPERATIONS
--------------------------------------------------------

  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" ADD CONSTRAINT "SMA_OPERATIONS_ACCOUNT_FK" FOREIGN KEY ("ACCOUNT_ID")
	  REFERENCES "USR_ADM"."SMA_ACCOUNT" ("ACCOUNT_ID") DISABLE;
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" ADD CONSTRAINT "SMA_OPERATIONS_CATEGORY_FK" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "USR_ADM"."SMA_CATEGORY" ("CATEGORY_ID") DISABLE;
  ALTER TABLE "USR_ADM"."SMA_OPERATIONS" ADD CONSTRAINT "SMA_OPERATIONS_COMMERCE_FK" FOREIGN KEY ("COMMERCE_ID")
	  REFERENCES "USR_ADM"."SMA_COMMERCE" ("COMMERCE_ID") DISABLE;
